[
    {
        "UID": "14254",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    \n    memset(data, 'A', 100-1); \n    data[100-1] = '\\0'; \n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "3718",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL;\n    \n    data = (int *)ALLOCA(10);\n    test_snippetSink(data);\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE121"
    },
    {
        "UID": "18145",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    \n    memset(data, 'A', 100-1); \n    data[100-1] = '\\0'; \n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "8424",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    int64_t * dataBadBuffer = (int64_t *)ALLOCA(50*sizeof(int64_t));\n    int64_t * dataGoodBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n    if(staticFive==5)\n    {\n        \n        data = dataBadBuffer;\n    }\n    {\n        int64_t source[100] = {0}; \n        {\n            size_t i;\n            \n            for (i = 0; i < 100; i++)\n            {\n                data[i] = source[i];\n            }\n            printLongLongLine(data[0]);\n        }\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "2249",
        "code": "void CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67bSink(CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67_structType test_snippet\n{\n    int data = myStruct.structFirst;\n    {\n        int i;\n        int buffer[10] = { 0 };\n        \n        if (data >= 0)\n        {\n            buffer[data] = 1;\n            \n            for(i = 0; i < 10; i++)\n            {\n                printIntLine(buffer[i]);\n            }\n        }\n        else\n        {\n            printLine(\"ERROR: Array index is negative.\");\n        }\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "6936",
        "code": "void test_snippet()\n{\n    char * data;\n    list<char *> dataList;\n    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));\n    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));\n    \n    data = dataBadBuffer;\n    data[0] = '\\0'; \n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "3768",
        "code": "void test_snippet()\n{\n    int * data;\n    map<int, int *> dataMap;\n    data = NULL;\n    \n    data = (int *)ALLOCA(10);\n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n762,Mismatched Memory Management Routines",
        "CWE": "CWE121"
    },
    {
        "UID": "8540",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    int64_t * dataBadBuffer = (int64_t *)ALLOCA(50*sizeof(int64_t));\n    int64_t * dataGoodBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n    \n    data = dataBadBuffer;\n    {\n        int64_t source[100] = {0}; \n        \n        memcpy(data, source, 100*sizeof(int64_t));\n        printLongLongLine(data[0]);\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "5344",
        "code": "void test_snippet()\n{\n    char * data;\n    map<int, char *> dataMap;\n    char dataBadBuffer[10];\n    char dataGoodBuffer[10+1];\n    \n    data = dataBadBuffer;\n    data[0] = '\\0'; \n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "9854",
        "code": "void test_snippet()\n{\n    int * data;\n    int dataBadBuffer[50];\n    int dataGoodBuffer[100];\n    \n    data = dataBadBuffer;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE121"
    },
    {
        "UID": "27598",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_snprintf_66bSink(wchar_t * test_snippet\n{\n    \n    wchar_t * data = dataArray[2];\n    {\n        wchar_t dest[50] = L\"\";\n        \n        SNPRINTF(dest, wcslen(data), L\"%s\", data);\n        printWLine(data);\n        delete [] data;\n    }\n}",
        "predicted": "122,Heap-based Buffer Overflow\n134,Use of Externally-Controlled Format String\n415,Double Free",
        "CWE": "CWE122"
    },
    {
        "UID": "20798",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_53bSink_b(char * test_snippet\n{\n    CWE122_Heap_Based_Buffer_Overflow__cpp_CWE193_char_cpy_53bSink_c(test_snippet;\n}",
        "predicted": "122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "26916",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_memcpy_53bSink_b(wchar_t * test_snippet\n{\n    CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_memcpy_53bSink_c(test_snippet;\n}",
        "predicted": "122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "28994",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL;\n    \n    data = (int *)malloc(10);\n    if (data == NULL) {exit(-1);}\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n762,Mismatched Memory Management Routines",
        "CWE": "CWE122"
    },
    {
        "UID": "34186",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        data = (int *)malloc(50*sizeof(int));\n        if (data == NULL) {exit(-1);}\n    }\n    {\n        int source[100] = {0}; \n        {\n            size_t i;\n            \n            for (i = 0; i < 100; i++)\n            {\n                data[i] = source[i];\n            }\n            printIntLine(data[0]);\n            free(data);\n        }\n    }\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow\n122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "27882",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_53bSink_b(char * test_snippet\n{\n    CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_cpy_53bSink_c(test_snippet;\n}",
        "predicted": "122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "27572",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_snprintf_54dSink_d(wchar_t * test_snippet\n{\n    CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_wchar_t_snprintf_54dSink_e(test_snippet;\n}",
        "predicted": "122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "34246",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL;\n    data = test_snippetSource(data);\n    {\n        int source[100] = {0}; \n        {\n            size_t i;\n            \n            for (i = 0; i < 100; i++)\n            {\n                data[i] = source[i];\n            }\n            printIntLine(data[0]);\n            free(data);\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference\n401,Missing Release of Memory after Effective Lifetime\n416,Use After Free",
        "CWE": "CWE122"
    },
    {
        "UID": "28423",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_cat_74bSink(map<int, char *> test_snippet\n{\n    \n    char * data = dataMap[2];\n    {\n        char dest[50] = \"\";\n        \n        strcat(dest, data);\n        printLine(data);\n        delete [] data;\n    }\n}",
        "predicted": "122,Heap-based Buffer Overflow\n415,Double Free",
        "CWE": "CWE122"
    },
    {
        "UID": "25960",
        "code": "void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memcpy_54cSink_c(char * test_snippet\n{\n    CWE122_Heap_Based_Buffer_Overflow__cpp_CWE806_char_memcpy_54cSink_d(test_snippet;\n}",
        "predicted": "122,Heap-based Buffer Overflow",
        "CWE": "CWE122"
    },
    {
        "UID": "40429",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    CWE123_Write_What_Where_Condition__fgets_67_structType myStruct;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    \n    if (fgets((char*)&data, sizeof(data), stdin) == NULL)\n    {\n        printLine(\"fgets failed!\");\n        exit(1);\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "123,Write-what-where Condition\n252,Unchecked Return Value",
        "CWE": "CWE123"
    },
    {
        "UID": "40286",
        "code": "void CWE123_Write_What_Where_Condition__connect_socket_74bSink(map<int, CWE123_Write_What_Where_Condition__connect_socket_74bStruct> test_snippet\n{\n    \n    CWE123_Write_What_Where_Condition__connect_socket_74bStruct data = dataMap[2];\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40200",
        "code": "static CWE123_Write_What_Where_Condition__connect_socket_42Struct CWE123_Write_What_Where_Condition__connect_socket_42Source(CWE123_Write_What_Where_Condition__connect_socket_42Struct test_snippet\n{\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            \n            recvResult = recv(connectSocket, (char*)&data, sizeof(test_snippet, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    return data;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40441",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    list<test_snippetStruct> dataList;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    \n    if (fgets((char*)&data, sizeof(data), stdin) == NULL)\n    {\n        printLine(\"fgets failed!\");\n        exit(1);\n    }\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE123"
    },
    {
        "UID": "40596",
        "code": "void test_snippet()\n{\n    CWE123_Write_What_Where_Condition__listen_socket_68bStruct data = CWE123_Write_What_Where_Condition__listen_socket_68bData;\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40201",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    data = test_snippetSource(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40566",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    data = test_snippetSource(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40222",
        "code": "void CWE123_Write_What_Where_Condition__connect_socket_52bSink(CWE123_Write_What_Where_Condition__connect_socket_52bStruct test_snippet\n{\n    CWE123_Write_What_Where_Condition__connect_socket_52bSink(test_snippet;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40328",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(6)\n    {\n    case 6:\n        \n        if (fgets((char*)&data, sizeof(data), stdin) == NULL)\n        {\n            printLine(\"fgets failed!\");\n            exit(1);\n        }\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "40362",
        "code": "void test_snippet()\n{\n    test_snippetStruct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    data = test_snippetSource(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}",
        "predicted": "123,Write-what-where Condition",
        "CWE": "CWE123"
    },
    {
        "UID": "45100",
        "code": "void CWE124_Buffer_Underwrite__new_wchar_t_ncpy_53bSink_b(wchar_t * test_snippet\n{\n    CWE124_Buffer_Underwrite__new_wchar_t_ncpy_53bSink_c(test_snippet;\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "46337",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    CWE124_Buffer_Underwrite__wchar_t_declare_memmove_67_structType myStruct;\n    wchar_t dataBuffer[100];\n    wmemset(dataBuffer, L'A', 100-1);\n    dataBuffer[100-1] = L'\\0';\n    \n    data = dataBuffer - 8;\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "44297",
        "code": "void CWE124_Buffer_Underwrite__new_char_ncpy_53cSink_c(char * test_snippet\n{\n    CWE124_Buffer_Underwrite__new_char_ncpy_53cSink_d(test_snippet;\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "43687",
        "code": "void test_snippet()\n{\n    char * data;\n    char * dataArray[5];\n    data = NULL;\n    {\n        char * dataBuffer = new char[100];\n        memset(dataBuffer, 'A', 100-1);\n        dataBuffer[100-1] = '\\0';\n        \n        data = dataBuffer - 8;\n    }\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "40624",
        "code": "void test_snippet()\n{\n    char * data;\n    char * dataBuffer = (char *)ALLOCA(100*sizeof(char));\n    memset(dataBuffer, 'A', 100-1);\n    dataBuffer[100-1] = '\\0';\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        data = dataBuffer - 8;\n    }\n    {\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        \n        strcpy(data, source);\n        printLine(data);\n    }\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "42794",
        "code": "static wchar_t * CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_21Source(wchar_t * test_snippet\n{\n    if(CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_21Static)\n    {\n        {\n            wchar_t * dataBuffer = (wchar_t *)malloc(100*sizeof(wchar_t));\n            if (dataBuffer == NULL) {exit(-1);}\n            wmemset(dataBuffer, L'A', 100-1);\n            dataBuffer[100-1] = L'\\0';\n            \n            data = dataBuffer - 8;\n        }\n    }\n    return data;\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "41850",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    memset(dataBuffer, 'A', 100-1);\n    dataBuffer[100-1] = '\\0';\n    while(1)\n    {\n        \n        data = dataBuffer - 8;\n        break;\n    }\n    {\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        \n        strncpy(data, source, 100-1);\n        \n        data[100-1] = '\\0';\n        printLine(data);\n    }\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "43774",
        "code": "void test_snippet()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    data = NULL;\n    {\n        char * data = *dataPtr1;\n        {\n            char * dataBuffer = new char[100];\n            memset(dataBuffer, 'A', 100-1);\n            dataBuffer[100-1] = '\\0';\n            \n            data = dataBuffer - 8;\n        }\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        {\n            size_t i;\n            char source[100];\n            memset(source, 'C', 100-1); \n            source[100-1] = '\\0'; \n            \n            for (i = 0; i < 100; i++)\n            {\n                data[i] = source[i];\n            }\n            \n            data[100-1] = '\\0';\n            printLine(data);\n            \n        }\n    }\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')\n126,Buffer Over-read\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE124"
    },
    {
        "UID": "43663",
        "code": "void CWE124_Buffer_Underwrite__new_char_cpy_54dSink_d(char * test_snippet\n{\n    CWE124_Buffer_Underwrite__new_char_cpy_54dSink_e(test_snippet;\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE124"
    },
    {
        "UID": "42473",
        "code": "void test_snippet()\n{\n    char * data;\n    data = NULL;\n    test_snippetStatic = 1; \n    data = test_snippetSource(data);\n    {\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        \n        memmove(data, source, 100*sizeof(char));\n        \n        data[100-1] = '\\0';\n        printLine(data);\n        \n    }\n}",
        "predicted": "476,NULL Pointer Dereference\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE124"
    },
    {
        "UID": "48617",
        "code": "void test_snippet()\n{\n    int data;\n    int *dataPtr1 = &data;\n    int *dataPtr2 = &data;\n    \n    data = -1;\n    {\n        int data = *dataPtr1;\n        \n        data = RAND32();\n        *dataPtr1 = data;\n    }\n    {\n        int data = *dataPtr2;\n        {\n            int buffer[10] = { 0 };\n            \n            if (data >= 0)\n            {\n                printIntLine(buffer[data]);\n            }\n            else\n            {\n                printLine(\"ERROR: Array index is negative\");\n            }\n        }\n    }\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE126"
    },
    {
        "UID": "48599",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE126"
    },
    {
        "UID": "50602",
        "code": "void CWE126_Buffer_Overread__new_wchar_t_loop_52bSink_b(wchar_t * test_snippet\n{\n    CWE126_Buffer_Overread__new_wchar_t_loop_52bSink_c(test_snippet;\n}",
        "predicted": "126,Buffer Over-read",
        "CWE": "CWE126"
    },
    {
        "UID": "51119",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    map<int, wchar_t *> dataMap;\n    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));\n    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));\n    wmemset(dataBadBuffer, L'A', 50-1); \n    dataBadBuffer[50-1] = L'\\0'; \n    wmemset(dataGoodBuffer, L'A', 100-1); \n    dataGoodBuffer[100-1] = L'\\0'; \n    \n    data = dataBadBuffer;\n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE126"
    },
    {
        "UID": "49090",
        "code": "void test_snippet()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        data = (char *)malloc(50*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 50-1); \n        data[50-1] = '\\0'; \n    }\n    else\n    {\n        \n        data = (char *)malloc(100*sizeof(char));\n        if (data == NULL) {exit(-1);}\n        memset(data, 'A', 100-1); \n        data[100-1] = '\\0'; \n    }\n    {\n        size_t i, destLen;\n        char dest[100];\n        memset(dest, 'C', 100-1);\n        dest[100-1] = '\\0'; \n        destLen = strlen(dest);\n        \n        for (i = 0; i < destLen; i++)\n        {\n            dest[i] = data[i];\n        }\n        dest[100-1] = '\\0';\n        printLine(dest);\n        free(data);\n    }\n}",
        "predicted": "126,Buffer Over-read\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE126"
    },
    {
        "UID": "46728",
        "code": "void test_snippet()\n{\n    char * data;\n    \n    void (*funcPtr) (char *) = test_snippetSink;\n    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));\n    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));\n    memset(dataBadBuffer, 'A', 50-1); \n    dataBadBuffer[50-1] = '\\0'; \n    memset(dataGoodBuffer, 'A', 100-1); \n    dataGoodBuffer[100-1] = '\\0'; \n    \n    data = dataBadBuffer;\n    \n    funcPtr(data);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE126"
    },
    {
        "UID": "48656",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE126"
    },
    {
        "UID": "50616",
        "code": "void CWE126_Buffer_Overread__new_wchar_t_loop_54bSink_b(wchar_t * test_snippet\n{\n    CWE126_Buffer_Overread__new_wchar_t_loop_54bSink_c(test_snippet;\n}",
        "predicted": "126,Buffer Over-read",
        "CWE": "CWE126"
    },
    {
        "UID": "50771",
        "code": "void CWE126_Buffer_Overread__new_wchar_t_memcpy_53cSink_c(wchar_t * test_snippet\n{\n    CWE126_Buffer_Overread__new_wchar_t_memcpy_53cSink_d(test_snippet;\n}",
        "predicted": "126,Buffer Over-read",
        "CWE": "CWE126"
    },
    {
        "UID": "50819",
        "code": "void CWE126_Buffer_Overread__new_wchar_t_memcpy_72bSink(vector<wchar_t *> test_snippet\n{\n    \n    wchar_t * data = dataVector[2];\n    {\n        wchar_t dest[100];\n        wmemset(dest, L'C', 100-1);\n        dest[100-1] = L'\\0'; \n        \n        memcpy(dest, data, wcslen(dest)*sizeof(wchar_t));\n        dest[100-1] = L'\\0';\n        printWLine(dest);\n        delete [] data;\n    }\n}",
        "predicted": "126,Buffer Over-read",
        "CWE": "CWE126"
    },
    {
        "UID": "55473",
        "code": "void CWE127_Buffer_Underread__new_char_ncpy_53bSink_b(char * test_snippet\n{\n    CWE127_Buffer_Underread__new_char_ncpy_53bSink_c(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "54698",
        "code": "void CWE127_Buffer_Underread__malloc_wchar_t_ncpy_64bSink(void * test_snippet\n{\n    \n    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;\n    \n    wchar_t * data = (*dataPtr);\n    {\n        wchar_t dest[100];\n        wmemset(dest, L'C', 100-1); \n        dest[100-1] = L'\\0'; \n        \n        wcsncpy(dest, data, wcslen(dest));\n        \n        dest[100-1] = L'\\0';\n        printWLine(dest);\n        \n    }\n}",
        "predicted": "127,Buffer Under-read\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE127"
    },
    {
        "UID": "55964",
        "code": "void CWE127_Buffer_Underread__new_wchar_t_memcpy_54bSink_b(wchar_t * test_snippet\n{\n    CWE127_Buffer_Underread__new_wchar_t_memcpy_54bSink_c(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "57590",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    test_snippet_unionType myUnion;\n    wchar_t dataBuffer[100];\n    wmemset(dataBuffer, L'A', 100-1);\n    dataBuffer[100-1] = L'\\0';\n    \n    data = dataBuffer - 8;\n    myUnion.unionFirst = data;\n    {\n        wchar_t * data = myUnion.unionSecond;\n        {\n            wchar_t dest[100];\n            wmemset(dest, L'C', 100-1); \n            dest[100-1] = L'\\0'; \n            \n            wcsncpy(dest, data, wcslen(dest));\n            \n            dest[100-1] = L'\\0';\n            printWLine(dest);\n        }\n    }\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE127"
    },
    {
        "UID": "55243",
        "code": "void test_snippet()\n{\n    char * data;\n    data = NULL;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char * dataBuffer = new char[100];\n            memset(dataBuffer, 'A', 100-1);\n            dataBuffer[100-1] = '\\0';\n            \n            data = dataBuffer - 8;\n        }\n    }\n    else\n    {\n        {\n            char * dataBuffer = new char[100];\n            memset(dataBuffer, 'A', 100-1);\n            dataBuffer[100-1] = '\\0';\n            \n            data = dataBuffer;\n        }\n    }\n    {\n        char dest[100];\n        memset(dest, 'C', 100-1); \n        dest[100-1] = '\\0'; \n        \n        memmove(dest, data, 100*sizeof(char));\n        \n        dest[100-1] = '\\0';\n        printLine(dest);\n        \n    }\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE127"
    },
    {
        "UID": "55644",
        "code": "void CWE127_Buffer_Underread__new_wchar_t_cpy_54cSink_c(wchar_t * test_snippet\n{\n    CWE127_Buffer_Underread__new_wchar_t_cpy_54cSink_d(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "55153",
        "code": "void CWE127_Buffer_Underread__new_char_memcpy_53cSink_c(char * test_snippet\n{\n    CWE127_Buffer_Underread__new_char_memcpy_53cSink_d(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "55000",
        "code": "void CWE127_Buffer_Underread__new_char_loop_54cSink_c(char * test_snippet\n{\n    CWE127_Buffer_Underread__new_char_loop_54cSink_d(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "55475",
        "code": "void CWE127_Buffer_Underread__new_char_ncpy_53cSink_c(char * test_snippet\n{\n    CWE127_Buffer_Underread__new_char_ncpy_53cSink_d(test_snippet;\n}",
        "predicted": "127,Buffer Under-read",
        "CWE": "CWE127"
    },
    {
        "UID": "53040",
        "code": "void test_snippet()\n{\n    char * data;\n    test_snippet_unionType myUnion;\n    char dataBuffer[100];\n    memset(dataBuffer, 'A', 100-1);\n    dataBuffer[100-1] = '\\0';\n    \n    data = dataBuffer - 8;\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        {\n            char dest[100];\n            memset(dest, 'C', 100-1); \n            dest[100-1] = '\\0'; \n            \n            strncpy(dest, data, strlen(dest));\n            \n            dest[100-1] = '\\0';\n            printLine(dest);\n        }\n    }\n}",
        "predicted": "124,Buffer Underwrite ('Buffer Underflow')",
        "CWE": "CWE127"
    },
    {
        "UID": "61595",
        "code": "void test_snippet()\n{\n    char * data;\n    test_snippet_unionType myUnion;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        \n        fprintf(stdout, data);\n    }\n}",
        "predicted": "134,Use of Externally-Controlrolled Format String\n121,Stack-based Buffer Overflow",
        "CWE": "CWE134"
    },
    {
        "UID": "62891",
        "code": "void CWE134_Uncontrolled_Format_String__char_environment_vprintf_53dSink(char * test_snippet\n{\n    CWE134_Uncontrolled_Format_String__char_environment_vprintf_53dVaSink(data, test_snippet;\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "63500",
        "code": "void test_snippet()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        char * data = *dataPtr1;\n        {\n            \n            size_t dataLen = strlen(data);\n            FILE * pFile;\n            \n            if (100-dataLen > 1)\n            {\n                pFile = fopen(FILENAME, \"r\");\n                if (pFile != NULL)\n                {\n                    \n                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\n                    {\n                        printLine(\"fgets() failed\");\n                        \n                        data[dataLen] = '\\0';\n                    }\n                    fclose(pFile);\n                }\n            }\n        }\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        \n        fprintf(stdout, data);\n    }\n}",
        "predicted": "134,Use of Externally-Controlrolled Format String\n252,Unchecked Return Value\n253,Incorrect Check of Function Return Value\n401,Missing Release of Memory after Effective Lifetime\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE134"
    },
    {
        "UID": "73282",
        "code": "static void CWE134_Uncontrolled_Format_String__wchar_t_file_printf_21Sink(wchar_t * test_snippet\n{\n    if(CWE134_Uncontrolled_Format_String__wchar_t_file_printf_21Static)\n    {\n        \n        wprintf(test_snippet;\n    }\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "65154",
        "code": "static void test_snippet()\n{\n    char * data = CWE134_Uncontrolled_Format_String__char_file_w32_vsnprintf_45Data;\n    CWE134_Uncontrolled_Format_String__char_file_w32_vsnprintf_45VaSink(data, data);\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "74390",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    test_snippetSource(data);\n    test_snippetVaSink(data, data);\n}",
        "predicted": "415,Double Free\n401,Missing Release of Memory after Effective Lifetime\n762,Mismatched Memory Management Routines",
        "CWE": "CWE134"
    },
    {
        "UID": "60550",
        "code": "static void test_snippet()\n{\n    char * data = CWE134_Uncontrolled_Format_String__char_console_vfprintf_45Data;\n    CWE134_Uncontrolled_Format_String__char_console_vfprintf_45VaSink(data, data);\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "72822",
        "code": "void CWE134_Uncontrolled_Format_String__wchar_t_environment_w32_vsnprintf_52cSink(wchar_t * test_snippet\n{\n    CWE134_Uncontrolled_Format_String__wchar_t_environment_w32_vsnprintf_52cVaSink(data, test_snippet;\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "69605",
        "code": "void test_snippet()\n{\n    wchar_t * data = CWE134_Uncontrolled_Format_String__wchar_t_console_printf_68bData;\n    \n    wprintf(data);\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "67418",
        "code": "void CWE134_Uncontrolled_Format_String__wchar_t_connect_socket_fprintf_63bSink(wchar_t * * test_snippet\n{\n    wchar_t * data = *dataPtr;\n    \n    fwprintf(stdout, data);\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE134"
    },
    {
        "UID": "76847",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_41Sink(char * test_snippet\n{\n    \n    if (!SetComputerNameA(test_snippet)\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76937",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_74bSink(map<int, char *> test_snippet\n{\n    \n    char * data = dataMap[2];\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76917",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_66bSink(char * test_snippet\n{\n    \n    char * data = dataArray[2];\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76863",
        "code": "static void test_snippet()\n{\n    char * data = CWE15_External_Control_of_System_or_Configuration_Setting__w32_45Data;\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76801",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76909",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_64bSink(void * test_snippet\n{\n    \n    char * * dataPtr = (char * *)dataVoidPtr;\n    \n    char * data = (*dataPtr);\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76921",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_67bSink(CWE15_External_Control_of_System_or_Configuration_Setting__w32_67_structType test_snippet\n{\n    char * data = myStruct.structFirst;\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76933",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_73bSink(list<char *> test_snippet\n{\n    \n    char * data = dataList.back();\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76929",
        "code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_72bSink(vector<char *> test_snippet\n{\n    \n    char * data = dataVector[2];\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE15"
    },
    {
        "UID": "76828",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    test_snippetStatic = 1; \n    data = test_snippetSource(data);\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting\n78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE15"
    },
    {
        "UID": "77066",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    void (*funcPtr) (wchar_t *) = test_snippetSink;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    \n    funcPtr(data);\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE176"
    },
    {
        "UID": "77027",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE176"
    },
    {
        "UID": "77134",
        "code": "void CWE176_Improper_Handling_of_Unicode_Encoding__w32_63bSink(wchar_t * * test_snippet\n{\n    wchar_t * data = *dataPtr;\n    {\n        char convertedText[10] = \"\";\n        int requiredSize;\n        requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n        \n        WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE176"
    },
    {
        "UID": "77005",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        char convertedText[10] = \"\";\n        int requiredSize;\n        requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n        \n        WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding\n121,Stack-based Buffer Overflow",
        "CWE": "CWE176"
    },
    {
        "UID": "77131",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    test_snippetSink(&data);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE176"
    },
    {
        "UID": "77149",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t * dataArray[5];\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE176"
    },
    {
        "UID": "77176",
        "code": "void CWE176_Improper_Handling_of_Unicode_Encoding__w32_73bSink(list<wchar_t *> test_snippet\n{\n    \n    wchar_t * data = dataList.back();\n    {\n        char convertedText[10] = \"\";\n        int requiredSize;\n        requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n        \n        WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE176"
    },
    {
        "UID": "76992",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    }\n    else\n    {\n        \n        wcscpy(data, L\"\\\\u9580\");\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char convertedText[10] = \"\";\n            int requiredSize;\n            requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n            \n            WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n        }\n    }\n    else\n    {\n        {\n            char convertedText[10] = \"\";\n            int requiredSize;\n            requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n            \n            if (requiredSize < 10)\n            {\n                WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n            }\n            else\n            {\n                printLine(\"Destination buffer not large enough to perform conversion.\");\n            }\n        }\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE176"
    },
    {
        "UID": "77161",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE176"
    },
    {
        "UID": "77038",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t * *dataPtr1 = &data;\n    wchar_t * *dataPtr2 = &data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    {\n        wchar_t * data = *dataPtr1;\n        \n        wcscpy(data, L\"\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\\\\u9580\\\\u961c\\\\u9640\\\\u963f\\\\u963b\\\\u9644\");\n        *dataPtr1 = data;\n    }\n    {\n        wchar_t * data = *dataPtr2;\n        {\n            char convertedText[10] = \"\";\n            int requiredSize;\n            requiredSize = WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, 0, 0, 0);\n            \n            WideCharToMultiByte(CP_ACP, WC_COMPOSITECHECK, data, -1, convertedText, requiredSize , 0, 0);\n        }\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow\n176,Improper Handling of Unicode Encoding",
        "CWE": "CWE176"
    },
    {
        "UID": "98223",
        "code": "void test_snippet()\n{\n    unsigned int data;\n    CWE190_Integer_Overflow__unsigned_int_rand_preinc_67_structType myStruct;\n    data = 0;\n    \n    data = (unsigned int)RAND32();\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE190"
    },
    {
        "UID": "95554",
        "code": "void test_snippet()\n{\n    int64_t data;\n    data = 0LL;\n    \n    data = (int64_t)RAND64();\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE190"
    },
    {
        "UID": "94206",
        "code": "void test_snippet()\n{\n    unsigned int data;\n    data = 0;\n    if(staticTrue)\n    {\n        \n        data = (unsigned int)RAND32();\n    }\n    if(staticTrue)\n    {\n        {\n            \n            data++;\n            unsigned int result = data;\n            printUnsignedLine(result);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE190"
    },
    {
        "UID": "78858",
        "code": "void test_snippet()\n{\n    char data;\n    char *dataPtr1 = &data;\n    char *dataPtr2 = &data;\n    data = ' ';\n    {\n        char data = *dataPtr1;\n        \n        data = (char)RAND32();\n        *dataPtr1 = data;\n    }\n    {\n        char data = *dataPtr2;\n        {\n            \n            char result = data + 1;\n            printHexCharLine(result);\n        }\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n134,Use of Externally-Controlled Format String",
        "CWE": "CWE190"
    },
    {
        "UID": "97944",
        "code": "void test_snippet()\n{\n    unsigned int data;\n    data = 0;\n    \n    data = UINT_MAX;\n    test_snippetSink(data);\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE190"
    },
    {
        "UID": "94738",
        "code": "void test_snippet()\n{\n    char data;\n    data = ' ';\n    \n    data = CHAR_MAX;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE190"
    },
    {
        "UID": "79366",
        "code": "void test_snippet()\n{\n    char data;\n    data = ' ';\n    data = test_snippetSource(data);\n    {\n        \n        char result = data * data;\n        printHexCharLine(result);\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE190"
    },
    {
        "UID": "94602",
        "code": "void test_snippet()\n{\n    char data;\n    CWE190_Integer_Overflow__char_fscanf_preinc_67_structType myStruct;\n    data = ' ';\n    \n    fscanf (stdin, \"%c\", &data);\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "190,Integer Overflow or Wraparound\n252,Unchecked Return Value\n197,Numeric Truncation Error",
        "CWE": "CWE190"
    },
    {
        "UID": "83136",
        "code": "void CWE190_Integer_Overflow__int_fgets_square_63bSink(int * test_snippet\n{\n    int data = *dataPtr;\n    {\n        \n        int result = data * data;\n        printIntLine(result);\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound\n680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE190"
    },
    {
        "UID": "97164",
        "code": "void test_snippet()\n{\n    short data;\n    data = 0;\n    \n    fscanf (stdin, \"%hd\", &data);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "190,Integer Overflow or Wraparound\n191,Integer Underflow (Wrap or Wraparound)\n252,Unchecked Return Value\n253,Incorrect Check of Function Return Value",
        "CWE": "CWE190"
    },
    {
        "UID": "109363",
        "code": "void test_snippet()\n{\n    short data;\n    data = 0;\n    if(staticFive==5)\n    {\n        \n        data = (short)RAND32();\n    }\n    if(staticFive==5)\n    {\n        {\n            \n            data--;\n            short result = data;\n            printIntLine(result);\n        }\n    }\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "112653",
        "code": "static void test_snippet()\n{\n    int data = CWE191_Integer_Underflow__int_rand_predec_45Data;\n    {\n        \n        --data;\n        int result = data;\n        printIntLine(result);\n    }\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "111387",
        "code": "void test_snippet()\n{\n    int64_t data;\n    data = 0LL;\n    \n    data = (int64_t)RAND64();\n    test_snippetSink(data);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE191"
    },
    {
        "UID": "105567",
        "code": "void test_snippet()\n{\n    short data;\n    data = 0;\n    \n    data = (short)RAND32();\n    test_snippetSink(&data);\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE191"
    },
    {
        "UID": "106980",
        "code": "void test_snippet()\n{\n    char data;\n    CWE191_Integer_Underflow__char_rand_postdec_67_structType myStruct;\n    data = ' ';\n    \n    data = (char)RAND32();\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "100954",
        "code": "void test_snippet()\n{\n    int64_t data;\n    data = 0LL;\n    if(STATIC_CONST_TRUE)\n    {\n        \n        data = (int64_t)RAND64();\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            \n            int64_t result = data - 1;\n            printLongLongLine(result);\n        }\n    }\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "107072",
        "code": "static void CWE191_Integer_Underflow__int64_t_fscanf_postdec_21Sink(int64_t test_snippet\n{\n    if(CWE191_Integer_Underflow__int64_t_fscanf_postdec_21Static)\n    {\n        {\n            \n            data--;\n            int64_t result = data;\n            printLongLongLine(result);\n        }\n    }\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "99138",
        "code": "void test_snippet()\n{\n    char data;\n    data = ' ';\n    \n    data = CHAR_MIN;\n    test_snippetSink(data);\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE191"
    },
    {
        "UID": "112216",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = 0;\n    data = test_snippetSource(data);\n    {\n        \n        --data;\n        int result = data;\n        printIntLine(result);\n    }\n}",
        "predicted": "194,Unexpected Sign Extension\n195,Signed to Unsigned Conversion Error\n197,Numeric Truncation Error\n369,Divide By Zero\n457,Use of Uninitialized Variable\n563,Assignment to Variable without Use\n665,Improper Initialization",
        "CWE": "CWE191"
    },
    {
        "UID": "100683",
        "code": "void test_snippet()\n{\n    int64_t data;\n    list<int64_t> dataList;\n    data = 0LL;\n    \n    data = LLONG_MIN;\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE191"
    },
    {
        "UID": "117649",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    \n    data = (short)RAND32();\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "197,Numeric Truncation Error",
        "CWE": "CWE194"
    },
    {
        "UID": "117044",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    \n    data = -1;\n    test_snippetSink(&data);\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "117290",
        "code": "static short CWE194_Unexpected_Sign_Extension__rand_malloc_21Source(short test_snippet\n{\n    if(CWE194_Unexpected_Sign_Extension__rand_malloc_21Static)\n    {\n        \n        data = (short)RAND32();\n    }\n    return data;\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "117205",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    \n    data = -1;\n    test_snippetSink(&data);\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "117782",
        "code": "short CWE194_Unexpected_Sign_Extension__rand_strncpy_22bSource(short test_snippet\n{\n    if(CWE194_Unexpected_Sign_Extension__rand_strncpy_22bGlobal)\n    {\n        \n        data = (short)RAND32();\n    }\n    return data;\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "116742",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    \n    data = -1;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "194,Unexpected Sign Extension\n195,Signed to Unsigned Conversion Error",
        "CWE": "CWE194"
    },
    {
        "UID": "117535",
        "code": "void test_snippet()\n{\n    short data;\n    \n    void (*funcPtr) (short) = test_snippetSink;\n    \n    data = 0;\n    \n    data = (short)RAND32();\n    \n    funcPtr(data);\n}",
        "predicted": "197,Numeric Truncation Error\n195,Signed to Unsigned Conversion Error",
        "CWE": "CWE194"
    },
    {
        "UID": "115188",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    switch(6)\n    {\n    case 6:\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        \n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            \n            data = (short)atoi(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        char source[100];\n        char dest[100] = \"\";\n        memset(source, 'A', 100-1);\n        source[100-1] = '\\0';\n        if (data < 100)\n        {\n            \n            strncpy(dest, source, data);\n            dest[data] = '\\0'; \n        }\n        printLine(dest);\n    }\n}",
        "predicted": "194,Unexpected Sign Extension\n195,Signed to Unsigned Conversion Error\n121,Stack-based Buffer Overflow",
        "CWE": "CWE194"
    },
    {
        "UID": "117704",
        "code": "void test_snippet()\n{\n    short data;\n    CWE194_Unexpected_Sign_Extension__rand_memmove_67_structType myStruct;\n    \n    data = 0;\n    \n    data = (short)RAND32();\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "117692",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = 0;\n    \n    data = (short)RAND32();\n    test_snippetSink(&data);\n}",
        "predicted": "194,Unexpected Sign Extension",
        "CWE": "CWE194"
    },
    {
        "UID": "118569",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    switch(6)\n    {\n    case 6:\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n        \n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            \n            data = atoi(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    if (data < 100)\n    {\n        \n        char * dataBuffer = (char *)malloc(data);\n        if (dataBuffer == NULL) {exit(-1);}\n        \n        memset(dataBuffer, 'A', data-1);\n        dataBuffer[data-1] = '\\0';\n        printLine(dataBuffer);\n        free(dataBuffer);\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound\n195,Signed to Unsigned Conversion Error\n680,Integer Overflow to Buffer Overflow\n789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE195"
    },
    {
        "UID": "120580",
        "code": "int CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_61bSource(int test_snippet\n{\n    \n    data = -1;\n    return data;\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE195"
    },
    {
        "UID": "120721",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = -1;\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE195"
    },
    {
        "UID": "121474",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    goto source;\nsource:\n    \n    data = RAND32();\n    {\n        char source[100];\n        char dest[100] = \"\";\n        memset(source, 'A', 100-1);\n        source[100-1] = '\\0';\n        if (data < 100)\n        {\n            \n            memmove(dest, source, data);\n            dest[data] = '\\0'; \n        }\n        printLine(dest);\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE195"
    },
    {
        "UID": "119318",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    fscanf(stdin, \"%d\", &data);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "252,Unchecked Return Value\n197,Numeric Truncation Error\n190,Integer Overflow or Wraparound\n191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE195"
    },
    {
        "UID": "120534",
        "code": "static int CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_42Source(int test_snippet\n{\n    \n    data = -1;\n    return data;\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE195"
    },
    {
        "UID": "120560",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = -1;\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE195"
    },
    {
        "UID": "120767",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = -1;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE195"
    },
    {
        "UID": "120729",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = -1;\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE195"
    },
    {
        "UID": "120755",
        "code": "void test_snippet()\n{\n    int data;\n    \n    void (*funcPtr) (int) = test_snippetSink;\n    \n    data = -1;\n    \n    data = -1;\n    \n    funcPtr(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE195"
    },
    {
        "UID": "122658",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    test_snippetGlobal = 1; \n    data = test_snippetSource(data);\n    {\n        \n        short shortData = (short)data;\n        printShortLine(shortData);\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE197"
    },
    {
        "UID": "122813",
        "code": "static int CWE197_Numeric_Truncation_Error__int_large_to_char_21Source(int test_snippet\n{\n    if(CWE197_Numeric_Truncation_Error__int_large_to_char_21Static)\n    {\n        \n        data = SHRT_MAX + 5;\n    }\n    return data;\n}",
        "predicted": "197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "123636",
        "code": "void test_snippet()\n{\n    int data;\n    test_snippet_unionType myUnion;\n    \n    data = -1;\n    \n    data = RAND32();\n    myUnion.unionFirst = data;\n    {\n        int data = myUnion.unionSecond;\n        {\n            \n            short shortData = (short)data;\n            printShortLine(shortData);\n        }\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error\n197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "121867",
        "code": "void CWE197_Numeric_Truncation_Error__int_connect_socket_to_char_41Sink(int test_snippet\n{\n    {\n        \n        char charData = (char)data;\n        printHexCharLine(charData);\n    }\n}",
        "predicted": "197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "122992",
        "code": "void test_snippet()\n{\n    int data;\n    test_snippet_unionType myUnion;\n    \n    data = -1;\n    \n    data = SHRT_MAX + 5;\n    myUnion.unionFirst = data;\n    {\n        int data = myUnion.unionSecond;\n        {\n            \n            short shortData = (short)data;\n            printShortLine(shortData);\n        }\n    }\n}",
        "predicted": "194,Unexpected Sign Extension\n190,Integer Overflow or Wraparound",
        "CWE": "CWE197"
    },
    {
        "UID": "124602",
        "code": "void test_snippet()\n{\n    short data;\n    test_snippet_unionType myUnion;\n    \n    data = -1;\n    \n    data = (short)RAND32();\n    myUnion.unionFirst = data;\n    {\n        short data = myUnion.unionSecond;\n        {\n            \n            char charData = (char)data;\n            printHexCharLine(charData);\n        }\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error\n197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "122925",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = SHRT_MAX + 5;\n    {\n        \n        short shortData = (short)data;\n        printShortLine(shortData);\n    }\n}",
        "predicted": "197,Numeric Truncation Error\n190,Integer Overflow or Wraparound",
        "CWE": "CWE197"
    },
    {
        "UID": "124218",
        "code": "void test_snippet()\n{\n    short data;\n    \n    data = -1;\n    if(5==5)\n    {\n        \n        data = CHAR_MAX + 1;\n    }\n    {\n        \n        char charData = (char)data;\n        printHexCharLine(charData);\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error\n197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "123463",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    test_snippetGlobal = 1; \n    data = test_snippetSource(data);\n    {\n        \n        char charData = (char)data;\n        printHexCharLine(charData);\n    }\n}",
        "predicted": "195,Signed to Unsigned Conversion Error",
        "CWE": "CWE197"
    },
    {
        "UID": "124262",
        "code": "static short CWE197_Numeric_Truncation_Error__short_large_21Source(short test_snippet\n{\n    if(CWE197_Numeric_Truncation_Error__short_large_21Static)\n    {\n        \n        data = CHAR_MAX + 1;\n    }\n    return data;\n}",
        "predicted": "197,Numeric Truncation Error",
        "CWE": "CWE197"
    },
    {
        "UID": "128643",
        "code": "void CWE23_Relative_Path_Traversal__char_listen_socket_ofstream_54cSink_c(char * test_snippet\n{\n    CWE23_Relative_Path_Traversal__char_listen_socket_ofstream_54cSink_d(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "125584",
        "code": "void CWE23_Relative_Path_Traversal__char_connect_socket_open_54cSink_c(char * test_snippet\n{\n    CWE23_Relative_Path_Traversal__char_connect_socket_open_54cSink_d(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "130414",
        "code": "void CWE23_Relative_Path_Traversal__wchar_t_console_open_54cSink_c(wchar_t * test_snippet\n{\n    CWE23_Relative_Path_Traversal__wchar_t_console_open_54cSink_d(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "125737",
        "code": "void CWE23_Relative_Path_Traversal__char_connect_socket_w32CreateFile_53cSink_c(char * test_snippet\n{\n    CWE23_Relative_Path_Traversal__char_connect_socket_w32CreateFile_53cSink_d(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "132177",
        "code": "void CWE23_Relative_Path_Traversal__wchar_t_file_w32CreateFile_53cSink_c(wchar_t * test_snippet\n{\n    CWE23_Relative_Path_Traversal__wchar_t_file_w32CreateFile_53cSink_d(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "126983",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, FILENAME_MAX-dataLen-1);\n        }\n    }\n    {\n        char * dataCopy = data;\n        char * data = dataCopy;\n        {\n            ofstream outputFile;\n            \n            outputFile.open((char *)data);\n            outputFile.close();\n        }\n    }\n}",
        "predicted": "23,Relative Path Traversal\n36,Absolute Path Traversal\n73,External Control of File Name or Path\n",
        "CWE": "CWE23"
    },
    {
        "UID": "126600",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, FILENAME_MAX-dataLen-1);\n        }\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
        "predicted": "23,Relative Path Traversal\n36,Absolute Path Traversal\n73,External Control of File Name or Path\n252,Unchecked Return Value\n253,Incorrect Check of Function Return Value\n377,Insecure Temporary File\n",
        "CWE": "CWE23"
    },
    {
        "UID": "131865",
        "code": "void CWE23_Relative_Path_Traversal__wchar_t_file_ofstream_54dSink_d(wchar_t * test_snippet\n{\n    CWE23_Relative_Path_Traversal__wchar_t_file_ofstream_54dSink_e(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "132497",
        "code": "void CWE23_Relative_Path_Traversal__wchar_t_listen_socket_ifstream_53bSink_b(wchar_t * test_snippet\n{\n    CWE23_Relative_Path_Traversal__wchar_t_listen_socket_ifstream_53bSink_c(test_snippet;\n}",
        "predicted": "23,Relative Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "125206",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    test_snippetGlobal = 1; \n    data = test_snippetSource(data);\n    {\n        ifstream inputFile;\n        \n        inputFile.open((char *)data);\n        inputFile.close();\n    }\n    ;\n}",
        "predicted": "23,Relative Path Traversal\n36,Absolute Path Traversal",
        "CWE": "CWE23"
    },
    {
        "UID": "134570",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        \n        putwchar((wchar_t)L'A');\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE252"
    },
    {
        "UID": "134916",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            \n            wchar_t dataBuffer[100] = L\"\";\n            wchar_t * data = dataBuffer;\n            \n            swscanf(SRC, L\"%99s\\0\", data);\n        }\n    }\n}",
        "predicted": "20,Improper Input Validation\n126,Buffer Over-read\n20,Improper Input Validation: The code does not validate the input before processing it, which can lead to various issues.\n126,Buffer Over-read: The code may read beyond the end of the buffer if the source string is longer than the destination buffer.",
        "CWE": "CWE252"
    },
    {
        "UID": "134034",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            \n            char dataBuffer[100] = \"\";\n            char * data = dataBuffer;\n            \n            sscanf(SRC, \"%99s\\0\", data);\n        }\n    }\n}",
        "predicted": "20,Improper Input Validation\n126,Buffer Over-read\n20,Improper Input Validation: The code does not validate the input from the SRC variable before using it in the sscanf function. This could lead to unexpected behavior if the SRC variable contains unexpected data.\n\n126,Buffer Over-read: The sscanf function is used to read data from the SRC variable into the data buffer. If the SRC variable contains more than 99 characters, the sscanf function will read beyond the end of the data buffer, leading to a buffer over-read.",
        "CWE": "CWE252"
    },
    {
        "UID": "133458",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        \n        fputc((int)'A', stdout);\n    }\n}",
        "predicted": "252,Unchecked Return Value",
        "CWE": "CWE252"
    },
    {
        "UID": "134210",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        ImpersonateSelf(SecurityImpersonation);\n        break;\n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE252"
    },
    {
        "UID": "134704",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    \n    PUTS(L\"string\");\n}",
        "predicted": "134,Use of Externally-Controlled Format String",
        "CWE": "CWE252"
    },
    {
        "UID": "133507",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        \n        fputs(\"string\", stdout);\n    }\n}",
        "predicted": "There is no apparent vulnerability in this code snippet.",
        "CWE": "CWE252"
    },
    {
        "UID": "134559",
        "code": "void test_snippet()\n{\n    \n    putwchar((wchar_t)L'A');\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE252"
    },
    {
        "UID": "134555",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        \n        fwrite((wchar_t *)L\"string\", sizeof(wchar_t), wcslen(L\"string\"), stdout);\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE252"
    },
    {
        "UID": "133706",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrue())\n    {\n        \n        putchar((int)'A');\n    }\n}",
        "predicted": "252,Unchecked Return Value",
        "CWE": "CWE252"
    },
    {
        "UID": "136542",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        if (REMOVE(L\"removemetest_snippet.txt\") == 0)\n        {\n            printLine(\"remove failed!\");\n        }\n    }\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "136510",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n        \n        if (PUTS(L\"string\") == 0)\n        {\n            printLine(\"puts failed!\");\n        }\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "135250",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        {\n            \n            char dataBuffer[100] = \"\";\n            char * data = dataBuffer;\n            \n            if (fread((char *)data, sizeof(char), (size_t)(100-1), stdin) == 0)\n            {\n                printLine(\"fread failed!\");\n            }\n        }\n    }\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "136666",
        "code": "void test_snippet()\n{\n    {\n        \n        wchar_t dataBuffer[100] = L\"\";\n        wchar_t * data = dataBuffer;\n        \n        if (SNPRINTF(data,100-wcslen(SRC_STRING)-1, L\"%s\\n\", SRC_STRING) == 0)\n        {\n            printLine(\"snprintf failed!\");\n        }\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "135957",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        \n        if (ImpersonateSelf(SecurityImpersonation) > 0)\n        {\n            exit(1);\n        }\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "135239",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        if (fputs(\"string\", stdout) == 0)\n        {\n            printLine(\"fputs failed!\");\n        }\n        break;\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "135827",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            HANDLE hMutex = NULL;\n            hMutex = CreateMutexA(NULL, FALSE, NULL);\n            \n            if (hMutex == INVALID_HANDLE_VALUE)\n            {\n                exit(1);\n            }\n            \n            CloseHandle(hMutex);\n        }\n        break;\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "136221",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        \n        if (fputws(L\"string\", stdout) == 0)\n        {\n            printLine(\"fputws failed!\");\n        }\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "136219",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        if (fputws(L\"string\", stdout) == 0)\n        {\n            printLine(\"fputws failed!\");\n        }\n        break;\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "136063",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            \n            wchar_t dataBuffer[100] = L\"\";\n            wchar_t * data = dataBuffer;\n            printLine(\"Please enter a string: \");\n            \n            if (fgetws(data, 100, stdin) < 0)\n            {\n                printLine(\"fgetws failed!\");\n                exit(1);\n            }\n            printWLine(data);\n        }\n    }\n}",
        "predicted": "253,Incorrect Check of Function Return Value",
        "CWE": "CWE253"
    },
    {
        "UID": "137373",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    CWE256_Plaintext_Storage_of_Password__w32_wchar_t_67_structType myStruct;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgetws(data, 100, pFile) == NULL)\n            {\n                data[0] = L'\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = L'\\0';\n        }\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "256,Plaintext Storage of a Password\n",
        "CWE": "CWE256"
    },
    {
        "UID": "137154",
        "code": "void CWE256_Plaintext_Storage_of_Password__w32_char_74bSink(map<int, char *> test_snippet\n{\n    \n    char * data = dataMap[2];\n    {\n        HANDLE pHandle;\n        char * username = \"User\";\n        char * domain = \"Domain\";\n        \n        if (LogonUserA(\n                    username,\n                    domain,\n                    data,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password",
        "CWE": "CWE256"
    },
    {
        "UID": "137284",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    void (*funcPtr) (wchar_t *) = test_snippetSink;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgetws(data, 100, pFile) == NULL)\n            {\n                data[0] = L'\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = L'\\0';\n        }\n    }\n    \n    funcPtr(data);\n}",
        "predicted": "256,Plaintext Storage of a Password\n526,Cleartext Storage of Sensitive Information in an Environment Variable\n401,Missing Release of Memory after Effective Lifetime\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE256"
    },
    {
        "UID": "136992",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgets(data, 100, pFile) == NULL)\n            {\n                data[0] = '\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = '\\0';\n        }\n    }\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable\n",
        "CWE": "CWE256"
    },
    {
        "UID": "137094",
        "code": "char * CWE256_Plaintext_Storage_of_Password__w32_char_61bSource(char * test_snippet\n{\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgets(data, 100, pFile) == NULL)\n            {\n                data[0] = '\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = '\\0';\n        }\n    }\n    return data;\n}",
        "predicted": "256,Plaintext Storage of a Password",
        "CWE": "CWE256"
    },
    {
        "UID": "137385",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    vector<wchar_t *> dataVector;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgetws(data, 100, pFile) == NULL)\n            {\n                data[0] = L'\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = L'\\0';\n        }\n    }\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "256,Plaintext Storage of a Password\n252,Unchecked Return Value\n401,Missing Release of Memory after Effective Lifetime\n459,Incomplete Cleanup",
        "CWE": "CWE256"
    },
    {
        "UID": "136964",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            FILE *pFile;\n            pFile = fopen(\"passwords.txt\", \"r\");\n            if (pFile != NULL)\n            {\n                \n                if (fgets(data, 100, pFile) == NULL)\n                {\n                    data[0] = '\\0';\n                }\n                fclose(pFile);\n            }\n            else\n            {\n                data[0] = '\\0';\n            }\n        }\n    }\n    else\n    {\n        {\n            FILE *pFile;\n            HCRYPTPROV hCryptProv = 0;\n            HCRYPTHASH hHash = 0;\n            HCRYPTKEY hKey = 0;\n            char hashData[100] = HASH_INPUT;\n            pFile = fopen(\"passwords.txt\", \"r\");\n            if (pFile != NULL)\n            {\n                if (fgets(data, 100, pFile) == NULL)\n                {\n                    data[0] = '\\0';\n                }\n                fclose(pFile);\n            }\n            else\n            {\n                data[0] = '\\0';\n            }\n            do\n            {\n                BYTE payload[(100 - 1) * sizeof(char)]; \n                DWORD payloadBytes;\n                \n                payloadBytes = decodeHexChars(payload, sizeof(payload), data);\n                \n                SecureZeroMemory(data, 100 * sizeof(char));\n                \n                if(!CryptAcquireContext(&hCryptProv, NULL, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, 0))\n                {\n                    break;\n                }\n                \n                if(!CryptCreateHash(hCryptProv, CALG_SHA_256, 0, 0, &hHash))\n                {\n                    break;\n                }\n                \n                if(!CryptHashData(hHash, (BYTE*)hashData, strlen(hashData), 0))\n                {\n                    break;\n                }\n                \n                if(!CryptDeriveKey(hCryptProv, CALG_AES_256, hHash, 0, &hKey))\n                {\n                    break;\n                }\n                \n                if(!CryptDecrypt(hKey, 0, 1, 0, payload, &payloadBytes))\n                {\n                    break;\n                }\n                \n                memcpy(data, payload, payloadBytes);\n                data[payloadBytes / sizeof(char)] = '\\0';\n            }\n            while (0);\n            if (hKey)\n            {\n                CryptDestroyKey(hKey);\n            }\n            if (hHash)\n            {\n                CryptDestroyHash(hHash);\n            }\n            if (hCryptProv)\n            {\n                CryptReleaseContext(hCryptProv, 0);\n            }\n        }\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            HANDLE pHandle;\n            char * username = \"User\";\n            char * domain = \"Domain\";\n            \n            if (LogonUserA(\n                        username,\n                        domain,\n                        data,\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &pHandle) != 0)\n            {\n                printLine(\"User logged in successfully.\");\n                CloseHandle(pHandle);\n            }\n            else\n            {\n                printLine(\"Unable to login.\");\n            }\n        }\n    }\n    else\n    {\n        {\n            HANDLE pHandle;\n            char * username = \"User\";\n            char * domain = \"Domain\";\n            char hashData[100] = HASH_INPUT;\n            HCRYPTPROV hCryptProv = 0;\n            HCRYPTHASH hHash = 0;\n            HCRYPTKEY hKey = 0;\n            do\n            {\n                BYTE payload[(100 - 1) * sizeof(char)]; \n                DWORD payloadBytes;\n                \n                payloadBytes = decodeHexChars(payload, sizeof(payload), data);\n                \n                SecureZeroMemory(data, 100 * sizeof(char));\n                \n                if(!CryptAcquireContext(&hCryptProv, NULL, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, 0))\n                {\n                    break;\n                }\n                \n                if(!CryptCreateHash(hCryptProv, CALG_SHA_256, 0, 0, &hHash))\n                {\n                    break;\n                }\n                \n                if(!CryptHashData(hHash, (BYTE*)hashData, strlen(hashData), 0))\n                {\n                    break;\n                }\n                \n                if(!CryptDeriveKey(hCryptProv, CALG_AES_256, hHash, 0, &hKey))\n                {\n                    break;\n                }\n                if(!CryptDecrypt(hKey, 0, 1, 0, payload, &payloadBytes))\n                {\n                    break;\n                }\n                \n                memcpy(data, payload, payloadBytes);\n                data[payloadBytes / sizeof(char)] = '\\0';\n            }\n            while (0);\n            if (hKey)\n            {\n                CryptDestroyKey(hKey);\n            }\n            if (hHash)\n            {\n                CryptDestroyHash(hHash);\n            }\n            if (hCryptProv)\n            {\n                CryptReleaseContext(hCryptProv, 0);\n            }\n            \n            if (LogonUserA(\n                        username,\n                        domain,\n                        data,\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &pHandle) != 0)\n            {\n                printLine(\"User logged in successfully.\");\n                CloseHandle(pHandle);\n            }\n            else\n            {\n                printLine(\"Unable to login.\");\n            }\n        }\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password\n259,Use of Hard-coded Password\n321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE256"
    },
    {
        "UID": "137394",
        "code": "void CWE256_Plaintext_Storage_of_Password__w32_wchar_t_73bSink(list<wchar_t *> test_snippet\n{\n    \n    wchar_t * data = dataList.back();\n    {\n        HANDLE pHandle;\n        wchar_t * username = L\"User\";\n        wchar_t * domain = L\"Domain\";\n        \n        if (LogonUserW(\n                    username,\n                    domain,\n                    data,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password",
        "CWE": "CWE256"
    },
    {
        "UID": "137127",
        "code": "void test_snippet()\n{\n    char * data;\n    CWE256_Plaintext_Storage_of_Password__w32_char_67_structType myStruct;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        FILE *pFile;\n        pFile = fopen(\"passwords.txt\", \"r\");\n        if (pFile != NULL)\n        {\n            \n            if (fgets(data, 100, pFile) == NULL)\n            {\n                data[0] = '\\0';\n            }\n            fclose(pFile);\n        }\n        else\n        {\n            data[0] = '\\0';\n        }\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "256,Plaintext Storage of a Password\n359,Exposure of Private Personal Information to an Unauthorized Actor",
        "CWE": "CWE256"
    },
    {
        "UID": "137218",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    if(globalFive==5)\n    {\n        {\n            FILE *pFile;\n            pFile = fopen(\"passwords.txt\", \"r\");\n            if (pFile != NULL)\n            {\n                \n                if (fgetws(data, 100, pFile) == NULL)\n                {\n                    data[0] = L'\\0';\n                }\n                fclose(pFile);\n            }\n            else\n            {\n                data[0] = L'\\0';\n            }\n        }\n    }\n    if(globalFive==5)\n    {\n        {\n            HANDLE pHandle;\n            wchar_t * username = L\"User\";\n            wchar_t * domain = L\"Domain\";\n            \n            if (LogonUserW(\n                        username,\n                        domain,\n                        data,\n                        LOGON32_LOGON_NETWORK,\n                        LOGON32_PROVIDER_DEFAULT,\n                        &pHandle) != 0)\n            {\n                printLine(\"User logged in successfully.\");\n                CloseHandle(pHandle);\n            }\n            else\n            {\n                printLine(\"Unable to login.\");\n            }\n        }\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password\n259,Use of Hard-coded Password\n321,Use of Hard-coded Cryptographic Key\n526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE256"
    },
    {
        "UID": "137641",
        "code": "static void CWE259_Hard_Coded_Password__w32_wchar_t_43Source(wchar_t * test_snippet\n{\n    \n    wcscpy(password, PASSWORD);\n}",
        "predicted": "259,Use of Hard-coded Password",
        "CWE": "CWE259"
    },
    {
        "UID": "137435",
        "code": "void test_snippet()\n{\n    char * password;\n    char passwordBuffer[100] = \"\";\n    password = passwordBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        strcpy(password, PASSWORD);\n    }\n    else\n    {\n        {\n            size_t passwordLen = 0;\n            \n            if (fgets(password, 100, stdin) == NULL)\n            {\n                printLine(\"fgets() failed\");\n                \n                password[0] = '\\0';\n            }\n            \n            passwordLen = strlen(password);\n            if (passwordLen > 0)\n            {\n                password[passwordLen-1] = '\\0';\n            }\n        }\n    }\n    {\n        HANDLE pHandle;\n        char * username = \"User\";\n        char * domain = \"Domain\";\n        \n        if (LogonUserA(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n    }\n}",
        "predicted": "259,Use of Hard-coded Password\n256,Plaintext Storage of a Password\n",
        "CWE": "CWE259"
    },
    {
        "UID": "137596",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    wchar_t passwordBuffer[100] = L\"\";\n    password = passwordBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        wcscpy(password, PASSWORD);\n    }\n    else\n    {\n        {\n            size_t passwordLen = 0;\n            \n            if (fgetws(password, 100, stdin) == NULL)\n            {\n                printLine(\"fgetws() failed\");\n                \n                password[0] = L'\\0';\n            }\n            \n            passwordLen = wcslen(password);\n            if (passwordLen > 0)\n            {\n                password[passwordLen-1] = L'\\0';\n            }\n        }\n    }\n    {\n        HANDLE pHandle;\n        wchar_t * username = L\"User\";\n        wchar_t * domain = L\"Domain\";\n        \n        if (LogonUserW(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password\n259,Use of Hard-coded Password\n321,Use of Hard-coded Cryptographic Key\n522,Insufficiently Protected Credentials\n",
        "CWE": "CWE259"
    },
    {
        "UID": "137556",
        "code": "void test_snippet()\n{\n    char * password;\n    list<char *> passwordList;\n    char passwordBuffer[100] = \"\";\n    password = passwordBuffer;\n    \n    strcpy(password, PASSWORD);\n    \n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    test_snippetSink(passwordList);\n}",
        "predicted": "256,Plaintext Storage of a Password\n259,Use of Hard-coded Password\n252,Unchecked Return Value\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE259"
    },
    {
        "UID": "137701",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    wchar_t * passwordArray[5];\n    wchar_t passwordBuffer[100] = L\"\";\n    password = passwordBuffer;\n    \n    wcscpy(password, PASSWORD);\n    \n    passwordArray[2] = password;\n    test_snippetSink(passwordArray);\n}",
        "predicted": "256,Plaintext Storage of a Password\n259,Use of Hard-coded Password\n321,Use of Hard-coded Cryptographic Key\n526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE259"
    },
    {
        "UID": "137604",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    wchar_t passwordBuffer[100] = L\"\";\n    password = passwordBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        wcscpy(password, PASSWORD);\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        HANDLE pHandle;\n        wchar_t * username = L\"User\";\n        wchar_t * domain = L\"Domain\";\n        \n        if (LogonUserW(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n    }\n}",
        "predicted": "259,Use of Hard-coded Password\n256,Plaintext Storage of a Password\n",
        "CWE": "CWE259"
    },
    {
        "UID": "137473",
        "code": "void test_snippet()\n{\n    char * password;\n    char passwordBuffer[100] = \"\";\n    password = passwordBuffer;\n    \n    strcpy(password, PASSWORD);\n    test_snippetSink(password);\n}",
        "predicted": "259,Use of Hard-coded Password\n256,Plaintext Storage of a Password",
        "CWE": "CWE259"
    },
    {
        "UID": "137544",
        "code": "void test_snippet()\n{\n    char * password;\n    CWE259_Hard_Coded_Password__w32_char_67_structType myStruct;\n    char passwordBuffer[100] = \"\";\n    password = passwordBuffer;\n    \n    strcpy(password, PASSWORD);\n    myStruct.structFirst = password;\n    test_snippetSink(myStruct);\n}",
        "predicted": "259,Use of Hard-coded Password",
        "CWE": "CWE259"
    },
    {
        "UID": "137705",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    CWE259_Hard_Coded_Password__w32_wchar_t_67_structType myStruct;\n    wchar_t passwordBuffer[100] = L\"\";\n    password = passwordBuffer;\n    \n    wcscpy(password, PASSWORD);\n    myStruct.structFirst = password;\n    test_snippetSink(myStruct);\n}",
        "predicted": "259,Use of Hard-coded Password",
        "CWE": "CWE259"
    },
    {
        "UID": "137461",
        "code": "char * CWE259_Hard_Coded_Password__w32_char_22bSource(char * test_snippet\n{\n    if(CWE259_Hard_Coded_Password__w32_char_22bGlobal)\n    {\n        \n        strcpy(password, PASSWORD);\n    }\n    return password;\n}",
        "predicted": "259,Use of Hard-coded Password",
        "CWE": "CWE259"
    },
    {
        "UID": "138255",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        wchar_t * keyName = L\"TEST\\\\TestKey\";\n        HKEY hKey;\n        \n        if (RegCreateKeyW(\n                    HKEY_LOCAL_MACHINE,\n                    keyName,\n                    &hKey) != ERROR_SUCCESS)\n        {\n            printLine(\"Registry key could not be created\");\n        }\n        else\n        {\n            printLine(\"Registry key created successfully\");\n            RegCloseKey(hKey);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "137868",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * keyName = \"TEST\\\\TestKey\";\n            HKEY hKey;\n            \n            if (RegCreateKeyExA(\n                        HKEY_LOCAL_MACHINE,\n                        keyName,\n                        0,\n                        NULL,\n                        REG_OPTION_NON_VOLATILE,\n                        KEY_WRITE,\n                        NULL,\n                        &hKey,\n                        NULL) != ERROR_SUCCESS)\n            {\n                printLine(\"Registry key could not be created\");\n            }\n            else\n            {\n                printLine(\"Registry key created successfully\");\n                RegCloseKey(hKey);\n            }\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "137774",
        "code": "void test_snippet()\n{\n    {\n        STARTUPINFOA si;\n        PROCESS_INFORMATION pi;\n        \n        if( !CreateProcessA(NULL,\n                            \"C:\\\\Program Files\\\\GoodApp arg1 arg2\",\n                            NULL,\n                            NULL,\n                            FALSE,\n                            0,\n                            NULL,\n                            NULL,\n                            &si,\n                            &pi))\n        {\n            printLine(\"CreateProcess failed\");\n            return;\n        }\n        else\n        {\n            printLine(\"CreateProcess successful\");\n        }\n        \n        WaitForSingleObject(pi.hProcess, INFINITE);\n        \n        CloseHandle(pi.hProcess);\n        CloseHandle(pi.hThread);\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE272"
    },
    {
        "UID": "138307",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            wchar_t * keyName = L\"TEST\\\\TestKey\";\n            HKEY hKey;\n            \n            if (RegOpenKeyExW(\n                        HKEY_LOCAL_MACHINE,\n                        keyName,\n                        0,\n                        KEY_WRITE,\n                        &hKey) != ERROR_SUCCESS)\n            {\n                printLine(\"Registry key could not be opened\");\n            }\n            else\n            {\n                printLine(\"Registry key opened successfully\");\n                RegCloseKey(hKey);\n            }\n        }\n        break;\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138262",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        wchar_t * keyName = L\"TEST\\\\TestKey\";\n        HKEY hKey;\n        \n        if (RegCreateKeyW(\n                    HKEY_LOCAL_MACHINE,\n                    keyName,\n                    &hKey) != ERROR_SUCCESS)\n        {\n            printLine(\"Registry key could not be created\");\n        }\n        else\n        {\n            printLine(\"Registry key created successfully\");\n            RegCloseKey(hKey);\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138015",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * keyName = \"TEST\\\\TestKey\";\n            HUSKEY hKey;\n            \n            if (SHRegCreateUSKeyA(\n                        keyName,\n                        KEY_WRITE,\n                        NULL,\n                        &hKey,\n                        SHREGSET_HKLM) != ERROR_SUCCESS)\n            {\n                printLine(\"Registry key could not be created\");\n            }\n            else\n            {\n                printLine(\"Registry key created successfully\");\n                SHRegCloseUSKey(hKey);\n            }\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138407",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            wchar_t * keyName = L\"TEST\\\\TestKey\";\n            HUSKEY hKey;\n            \n            if (SHRegOpenUSKeyW(\n                        keyName,\n                        KEY_WRITE,\n                        NULL,\n                        &hKey,\n                        TRUE) != ERROR_SUCCESS)\n            {\n                printLine(\"Registry key could not be opened\");\n            }\n            else\n            {\n                printLine(\"Registry key opened successfully\");\n                SHRegCloseUSKey(hKey);\n            }\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138215",
        "code": "void test_snippet()\n{\n    {\n        wchar_t * keyName = L\"TEST\\\\TestKey\";\n        HKEY hKey;\n        \n        if (RegCreateKeyW(\n                    HKEY_LOCAL_MACHINE,\n                    keyName,\n                    &hKey) != ERROR_SUCCESS)\n        {\n            printLine(\"Registry key could not be created\");\n        }\n        else\n        {\n            printLine(\"Registry key created successfully\");\n            RegCloseKey(hKey);\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138119",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        {\n            STARTUPINFOW si;\n            PROCESS_INFORMATION pi;\n            \n            if( !CreateProcessW(NULL,\n                                L\"C:\\\\Program Files\\\\GoodApp arg1 arg2\",\n                                NULL,\n                                NULL,\n                                FALSE,\n                                0,\n                                NULL,\n                                NULL,\n                                &si,\n                                &pi))\n            {\n                printLine(\"CreateProcess failed\");\n                return;\n            }\n            else\n            {\n                printLine(\"CreateProcess successful\");\n            }\n            \n            WaitForSingleObject(pi.hProcess, INFINITE);\n            \n            CloseHandle(pi.hProcess);\n            CloseHandle(pi.hThread);\n        }\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE272"
    },
    {
        "UID": "137966",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * keyName = \"TEST\\\\TestKey\";\n            HKEY hKey;\n            \n            if (RegOpenKeyExA(\n                        HKEY_LOCAL_MACHINE,\n                        keyName,\n                        0,\n                        KEY_WRITE,\n                        &hKey) != ERROR_SUCCESS)\n            {\n                printLine(\"Registry key could not be opened\");\n            }\n            else\n            {\n                printLine(\"Registry key opened successfully\");\n                RegCloseKey(hKey);\n            }\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE272"
    },
    {
        "UID": "138505",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138486",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138503",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        RpcImpersonateClient(0);\n        \n        \n        break;\n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138480",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138443",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            HANDLE hPipe = INVALID_HANDLE_VALUE;\n            hPipe = CreateNamedPipeA(\n                        \"\\\\\\\\.\\\\pipe\\\\test_pipe\",\n                        PIPE_ACCESS_DUPLEX | FILE_FLAG_FIRST_PIPE_INSTANCE,\n                        PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,\n                        PIPE_UNLIMITED_INSTANCES,\n                        BUFSIZE,\n                        BUFSIZE,\n                        NMPWAIT_USE_DEFAULT_WAIT,\n                        NULL);\n            if (hPipe == INVALID_HANDLE_VALUE)\n            {\n                exit(1);\n            }\n            \n            if (!ConnectNamedPipe(hPipe, NULL) && GetLastError() != ERROR_PIPE_CONNECTED)\n            {\n                CloseHandle(hPipe);\n                exit(1);\n            }\n            \n            ImpersonateNamedPipeClient(hPipe);\n            printLine(\"Impersonated\");\n            if (!RevertToSelf())\n            {\n                exit(1);\n            }\n            CloseHandle(hPipe);\n        }\n    }\n    else\n    {\n        {\n            HANDLE hPipe = INVALID_HANDLE_VALUE;\n            hPipe = CreateNamedPipeA(\n                        \"\\\\\\\\.\\\\pipe\\\\test_pipe\",\n                        PIPE_ACCESS_DUPLEX | FILE_FLAG_FIRST_PIPE_INSTANCE,\n                        PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,\n                        PIPE_UNLIMITED_INSTANCES,\n                        BUFSIZE,\n                        BUFSIZE,\n                        NMPWAIT_USE_DEFAULT_WAIT,\n                        NULL);\n            if (hPipe == INVALID_HANDLE_VALUE)\n            {\n                exit(1);\n            }\n            \n            if (!ConnectNamedPipe(hPipe, NULL) && GetLastError() != ERROR_PIPE_CONNECTED)\n            {\n                CloseHandle(hPipe);\n                exit(1);\n            }\n            \n            if (!ImpersonateNamedPipeClient(hPipe))\n            {\n                printLine(\"Failed to impersonate\");\n            }\n            else\n            {\n                printLine(\"Impersonated\");\n                if (!RevertToSelf())\n                {\n                    exit(1);\n                }\n            }\n            CloseHandle(hPipe);\n        }\n    }\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value",
        "CWE": "CWE273"
    },
    {
        "UID": "138497",
        "code": "void test_snippet()\n{\n    if(globalFive==5)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138462",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138460",
        "code": "void test_snippet()\n{\n    RpcImpersonateClient(0);\n    \n    \n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138494",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "138483",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        RpcImpersonateClient(0);\n        \n        \n    }\n}",
        "predicted": "273,Improper Check for Dropped Privileges",
        "CWE": "CWE273"
    },
    {
        "UID": "139566",
        "code": "static char * CWE321_Hard_Coded_Cryptographic_Key__w32_char_42Source(char * test_snippet\n{\n    \n    strcpy(cryptoKey, CRYPTO_KEY);\n    return cryptoKey;\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139650",
        "code": "void test_snippet()\n{\n    char * cryptoKey;\n    map<int, char *> cryptoKeyMap;\n    char cryptoKeyBuffer[100] = \"\";\n    cryptoKey = cryptoKeyBuffer;\n    \n    strcpy(cryptoKey, CRYPTO_KEY);\n    \n    cryptoKeyMap[0] = cryptoKey;\n    cryptoKeyMap[1] = cryptoKey;\n    cryptoKeyMap[2] = cryptoKey;\n    test_snippetSink(cryptoKeyMap);\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139703",
        "code": "static wchar_t * CWE321_Hard_Coded_Cryptographic_Key__w32_wchar_t_21Source(wchar_t * test_snippet\n{\n    if(CWE321_Hard_Coded_Cryptographic_Key__w32_wchar_t_21Static)\n    {\n        \n        wcscpy(cryptoKey, CRYPTO_KEY);\n    }\n    return cryptoKey;\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139811",
        "code": "void test_snippet()\n{\n    wchar_t * cryptoKey;\n    map<int, wchar_t *> cryptoKeyMap;\n    wchar_t cryptoKeyBuffer[100] = L\"\";\n    cryptoKey = cryptoKeyBuffer;\n    \n    wcscpy(cryptoKey, CRYPTO_KEY);\n    \n    cryptoKeyMap[0] = cryptoKey;\n    cryptoKeyMap[1] = cryptoKey;\n    cryptoKeyMap[2] = cryptoKey;\n    test_snippetSink(cryptoKeyMap);\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139551",
        "code": "char * CWE321_Hard_Coded_Cryptographic_Key__w32_char_22bSource(char * test_snippet\n{\n    if(CWE321_Hard_Coded_Cryptographic_Key__w32_char_22bGlobal)\n    {\n        \n        strcpy(cryptoKey, CRYPTO_KEY);\n    }\n    return cryptoKey;\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139588",
        "code": "void CWE321_Hard_Coded_Cryptographic_Key__w32_char_52bSink(char * test_snippet\n{\n    CWE321_Hard_Coded_Cryptographic_Key__w32_char_52bSink(test_snippet;\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139791",
        "code": "void test_snippet()\n{\n    wchar_t * cryptoKey;\n    wchar_t * cryptoKeyArray[5];\n    wchar_t cryptoKeyBuffer[100] = L\"\";\n    cryptoKey = cryptoKeyBuffer;\n    \n    wcscpy(cryptoKey, CRYPTO_KEY);\n    \n    cryptoKeyArray[2] = cryptoKey;\n    test_snippetSink(cryptoKeyArray);\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139787",
        "code": "void test_snippet()\n{\n    wchar_t * cryptoKey;\n    \n    void (*funcPtr) (wchar_t *) = test_snippetSink;\n    wchar_t cryptoKeyBuffer[100] = L\"\";\n    cryptoKey = cryptoKeyBuffer;\n    \n    wcscpy(cryptoKey, CRYPTO_KEY);\n    \n    funcPtr(cryptoKey);\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139694",
        "code": "void test_snippet()\n{\n    wchar_t * cryptoKey;\n    wchar_t cryptoKeyBuffer[100] = L\"\";\n    cryptoKey = cryptoKeyBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        wcscpy(cryptoKey, CRYPTO_KEY);\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        HCRYPTPROV hCryptProv;\n        HCRYPTKEY hKey;\n        HCRYPTHASH hHash;\n        wchar_t toBeEncrypted[] = L\"String to be encrypted\";\n        DWORD encryptedLen = wcslen(toBeEncrypted)*sizeof(wchar_t);\n        BYTE encrypted[200];    \n        \n        memcpy(encrypted, toBeEncrypted, encryptedLen);\n        \n        if(!CryptAcquireContext(&hCryptProv, NULL, MS_ENHANCED_PROV, PROV_RSA_AES, 0))\n        {\n            if(!CryptAcquireContext(&hCryptProv, NULL, MS_ENHANCED_PROV, PROV_RSA_AES, CRYPT_NEWKEYSET))\n            {\n                printLine(\"Error in acquiring cryptographic context\");\n                exit(1);\n            }\n        }\n        \n        if(!CryptCreateHash(hCryptProv, CALG_SHA_256, 0, 0, &hHash))\n        {\n            printLine(\"Error in creating hash\");\n            exit(1);\n        }\n        \n        if(!CryptHashData(hHash, (BYTE *) cryptoKey, wcslen(cryptoKey)*sizeof(wchar_t), 0))\n        {\n            printLine(\"Error in hashing cryptoKey\");\n            exit(1);\n        }\n        \n        if(!CryptDeriveKey(hCryptProv, CALG_AES_256, hHash, 0, &hKey))\n        {\n            printLine(\"Error in CryptDeriveKey\");\n            exit(1);\n        }\n        \n        \n        if(!CryptEncrypt(hKey, (HCRYPTHASH)NULL, 1, 0, encrypted, &encryptedLen, sizeof(encrypted)))\n        {\n            printLine(\"Error in CryptEncrypt\");\n            exit(1);\n        }\n        \n        printBytesLine(encrypted, encryptedLen);\n        if (hKey)\n        {\n            CryptDestroyKey(hKey);\n        }\n        if (hHash)\n        {\n            CryptDestroyHash(hHash);\n        }\n        if (hCryptProv)\n        {\n            CryptReleaseContext(hCryptProv, 0);\n        }\n    }\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "139803",
        "code": "void test_snippet()\n{\n    wchar_t * cryptoKey;\n    vector<wchar_t *> cryptoKeyVector;\n    wchar_t cryptoKeyBuffer[100] = L\"\";\n    cryptoKey = cryptoKeyBuffer;\n    \n    wcscpy(cryptoKey, CRYPTO_KEY);\n    \n    cryptoKeyVector.insert(cryptoKeyVector.end(), 1, cryptoKey);\n    cryptoKeyVector.insert(cryptoKeyVector.end(), 1, cryptoKey);\n    cryptoKeyVector.insert(cryptoKeyVector.end(), 1, cryptoKey);\n    test_snippetSink(cryptoKeyVector);\n}",
        "predicted": "321,Use of Hard-coded Cryptographic Key",
        "CWE": "CWE321"
    },
    {
        "UID": "140313",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140348",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n        break;\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140316",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140345",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        \n        int data = rand();\n        printIntLine(data);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140352",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        \n        int data = rand();\n        printIntLine(data);\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140350",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140337",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n    else\n    {\n        {\n            HCRYPTPROV hCryptProv;\n            int data;\n            if (!CryptAcquireContextW(&hCryptProv, 0, 0, PROV_RSA_FULL, 0))\n            {\n                exit(1);\n            }\n            \n            if (!CryptGenRandom(hCryptProv, sizeof(data), (BYTE *) &data))\n            {\n                CryptReleaseContext(hCryptProv, 0);\n                exit(1);\n            }\n            if (hCryptProv)\n            {\n                CryptReleaseContext(hCryptProv, 0);\n            }\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140325",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140305",
        "code": "void test_snippet()\n{\n    {\n        \n        int data = rand();\n        printIntLine(data);\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "140331",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        {\n            \n            int data = rand();\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE338"
    },
    {
        "UID": "151562",
        "code": "void CWE36_Absolute_Path_Traversal__wchar_t_file_fopen_52bSink_b(wchar_t * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__wchar_t_file_fopen_52bSink_c(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "145943",
        "code": "void CWE36_Absolute_Path_Traversal__char_console_fopen_54cSink_c(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_console_fopen_54cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "147551",
        "code": "void CWE36_Absolute_Path_Traversal__char_file_fopen_54bSink_b(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_file_fopen_54bSink_c(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "145291",
        "code": "void CWE36_Absolute_Path_Traversal__char_connect_socket_ifstream_53cSink_c(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_connect_socket_ifstream_53cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "146589",
        "code": "void CWE36_Absolute_Path_Traversal__char_console_w32CreateFile_54dSink_d(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_console_w32CreateFile_54dSink_e(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "148511",
        "code": "void CWE36_Absolute_Path_Traversal__char_listen_socket_ifstream_53cSink_c(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_listen_socket_ifstream_53cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "150119",
        "code": "void CWE36_Absolute_Path_Traversal__wchar_t_console_ifstream_53bSink_b(wchar_t * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__wchar_t_console_ifstream_53bSink_c(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "146748",
        "code": "void CWE36_Absolute_Path_Traversal__char_environment_fopen_54cSink_c(char * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__char_environment_fopen_54cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "152705",
        "code": "void CWE36_Absolute_Path_Traversal__wchar_t_listen_socket_ofstream_54cSink_c(wchar_t * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__wchar_t_listen_socket_ofstream_54cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "149799",
        "code": "void CWE36_Absolute_Path_Traversal__wchar_t_connect_socket_w32CreateFile_53cSink_c(wchar_t * test_snippet\n{\n    CWE36_Absolute_Path_Traversal__wchar_t_connect_socket_w32CreateFile_53cSink_d(test_snippet;\n}",
        "predicted": "36,Absolute Path Traversal",
        "CWE": "CWE36"
    },
    {
        "UID": "140394",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        structSigAtomic *gStructSigAtomic = NULL;\n        signal(SIGINT, SIG_DFL);\n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n        gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n        if (gStructSigAtomic == NULL) {exit(-1);}\n        test_snippetStructSigAtomicBad = gStructSigAtomic;\n        test_snippetStructSigAtomicBad->val = 1;\n        \n        signal(SIGINT, test_snippet_helper);\n        \n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140354",
        "code": "void test_snippet()\n{\n    {\n        structSigAtomic *gStructSigAtomic = NULL;\n        signal(SIGINT, SIG_DFL);\n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n        gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n        if (gStructSigAtomic == NULL) {exit(-1);}\n        test_snippetStructSigAtomicBad = gStructSigAtomic;\n        test_snippetStructSigAtomicBad->val = 1;\n        \n        signal(SIGINT, test_snippet_helper);\n        \n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140399",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition\n415,Double Free\n416,Use After Free",
        "CWE": "CWE364"
    },
    {
        "UID": "140386",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n    else\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicGood != NULL)\n            {\n                free(test_snippetStructSigAtomicGood);\n                test_snippetStructSigAtomicGood = 0;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicGood = gStructSigAtomic;\n            test_snippetStructSigAtomicGood->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicGood != NULL)\n            {\n                free(test_snippetStructSigAtomicGood);\n                test_snippetStructSigAtomicGood = NULL;\n            }\n            signal(SIGINT, test_snippet_helper);\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140391",
        "code": "void test_snippet()\n{\n    if(globalFive==5)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140397",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n        break;\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140368",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140371",
        "code": "void test_snippet()\n{\n    if(staticFive==5)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140401",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        structSigAtomic *gStructSigAtomic = NULL;\n        signal(SIGINT, SIG_DFL);\n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n        gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n        if (gStructSigAtomic == NULL) {exit(-1);}\n        test_snippetStructSigAtomicBad = gStructSigAtomic;\n        test_snippetStructSigAtomicBad->val = 1;\n        \n        signal(SIGINT, test_snippet_helper);\n        \n        if (test_snippetStructSigAtomicBad != NULL)\n        {\n            free(test_snippetStructSigAtomicBad);\n            test_snippetStructSigAtomicBad = NULL;\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140388",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            structSigAtomic *gStructSigAtomic = NULL;\n            signal(SIGINT, SIG_DFL);\n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n            gStructSigAtomic = (structSigAtomic*)malloc(sizeof(structSigAtomic));\n            if (gStructSigAtomic == NULL) {exit(-1);}\n            test_snippetStructSigAtomicBad = gStructSigAtomic;\n            test_snippetStructSigAtomicBad->val = 1;\n            \n            signal(SIGINT, test_snippet_helper);\n            \n            if (test_snippetStructSigAtomicBad != NULL)\n            {\n                free(test_snippetStructSigAtomicBad);\n                test_snippetStructSigAtomicBad = NULL;\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE364"
    },
    {
        "UID": "140414",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140484",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            int valBadSink;\n            valBadSink = 0;\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(valBadSink);\n        }\n    }\n    else\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            int valGoodSink;\n            valGoodSink = 0;\n            if (!stdThreadLockCreate(&gGoodLock))\n            {\n                return;\n            }\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valGoodSink, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valGoodSink, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            stdThreadLockDestroy(gGoodLock);\n            printIntLine(valGoodSink);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140450",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        stdThread threadA = NULL;\n        stdThread threadB = NULL;\n        gBadInt = 0;\n        if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n        {\n            threadA = NULL;\n        }\n        if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n        {\n            threadB = NULL;\n        }\n        if (threadA && stdThreadJoin(threadA))\n        {\n            stdThreadDestroy(threadA);\n        }\n        if (threadB && stdThreadJoin(threadB))\n        {\n            stdThreadDestroy(threadB);\n        }\n        printIntLine(gBadInt);\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140423",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140446",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n        break;\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140411",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140426",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140405",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            gBadInt = 0;\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, NULL, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(gBadInt);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140497",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            stdThread threadA = NULL;\n            stdThread threadB = NULL;\n            int valBadSink;\n            valBadSink = 0;\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadA))\n            {\n                threadA = NULL;\n            }\n            if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadB))\n            {\n                threadB = NULL;\n            }\n            if (threadA && stdThreadJoin(threadA))\n            {\n                stdThreadDestroy(threadA);\n            }\n            if (threadB && stdThreadJoin(threadB))\n            {\n                stdThreadDestroy(threadB);\n            }\n            printIntLine(valBadSink);\n        }\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "140452",
        "code": "void test_snippet()\n{\n    {\n        stdThread threadA = NULL;\n        stdThread threadB = NULL;\n        int valBadSink;\n        valBadSink = 0;\n        if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadA))\n        {\n            threadA = NULL;\n        }\n        if (!stdThreadCreate(test_snippet_helper, (void*)&valBadSink, &threadB))\n        {\n            threadB = NULL;\n        }\n        if (threadA && stdThreadJoin(threadA))\n        {\n            stdThreadDestroy(threadA);\n        }\n        if (threadB && stdThreadJoin(threadB))\n        {\n            stdThreadDestroy(threadB);\n        }\n        printIntLine(valBadSink);\n    }\n}",
        "predicted": "366,Race Condition within a Thread",
        "CWE": "CWE366"
    },
    {
        "UID": "143361",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        fscanf(stdin, \"%d\", &data);\n    }\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        printIntLine(100 % data);\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE369"
    },
    {
        "UID": "142051",
        "code": "void test_snippet()\n{\n    float data;\n    \n    data = 0.0F;\n    \n    data = 0.0F;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE369"
    },
    {
        "UID": "141313",
        "code": "void test_snippet()\n{\n    float data;\n    \n    data = 0.0F;\n    \n    fscanf (stdin, \"%f\", &data);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "252,Unchecked Return Value",
        "CWE": "CWE369"
    },
    {
        "UID": "140959",
        "code": "static float CWE369_Divide_by_Zero__float_fgets_42Source(float test_snippet\n{\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        \n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            \n            data = (float)atof(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    return data;\n}",
        "predicted": "369,Divide By Zero\n252,Unchecked Return Value",
        "CWE": "CWE369"
    },
    {
        "UID": "141055",
        "code": "void test_snippet()\n{\n    float data;\n    float dataArray[5];\n    \n    data = 0.0F;\n    {\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        \n        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n        {\n            \n            data = (float)atof(inputBuffer);\n        }\n        else\n        {\n            printLine(\"fgets() failed.\");\n        }\n    }\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "252,Unchecked Return Value\n476,NULL Pointer Dereference\n190,Integer Overflow or Wraparound\n121,Stack-based Buffer Overflow",
        "CWE": "CWE369"
    },
    {
        "UID": "144946",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = 0;\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE369"
    },
    {
        "UID": "141187",
        "code": "void test_snippet()\n{\n    float data;\n    \n    data = 0.0F;\n    \n    fscanf (stdin, \"%f\", &data);\n    {\n        float dataCopy = data;\n        float data = dataCopy;\n        {\n            \n            int result = (int)(100.0 / data);\n            printIntLine(result);\n        }\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE369"
    },
    {
        "UID": "141994",
        "code": "void test_snippet()\n{\n    float data;\n    \n    data = 0.0F;\n    \n    data = 0.0F;\n    test_snippetSink(data);\n}",
        "predicted": "563,Assignment to Variable without Use",
        "CWE": "CWE369"
    },
    {
        "UID": "144043",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    \n    printIntLine(100 / data);\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE369"
    },
    {
        "UID": "141685",
        "code": "void test_snippet()\n{\n    float data;\n    float &dataRef = data;\n    \n    data = 0.0F;\n    \n    data = (float)RAND32();\n    {\n        float data = dataRef;\n        {\n            \n            int result = (int)(100.0 / data);\n            printIntLine(result);\n        }\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE369"
    },
    {
        "UID": "153318",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            wchar_t * filename;\n            wchar_t tmpl[] = L\"fnXXXXXX\";\n            int fileDesc;\n            filename = MKTEMP(tmpl);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printWLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153320",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        wchar_t * filename;\n        wchar_t tmpl[] = L\"fnXXXXXX\";\n        int fileDesc;\n        filename = MKTEMP(tmpl);\n        if (filename == NULL)\n        {\n            exit(1);\n        }\n        printWLine(filename);\n        \n        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (fileDesc != -1)\n        {\n            printLine(\"Temporary file was opened...now closing file\");\n            CLOSE(fileDesc);\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153088",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        {\n            char * filename;\n            char tmpl[] = \"fnXXXXXX\";\n            int fileDesc;\n            filename = MKTEMP(tmpl);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153362",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        wchar_t * filename;\n        int fileDesc;\n        filename = TEMPNAM(NULL, NULL);\n        if (filename == NULL)\n        {\n            exit(1);\n        }\n        printWLine(filename);\n        \n        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (fileDesc != -1)\n        {\n            printLine(\"Temporary file was opened...now closing file\");\n            CLOSE(fileDesc);\n        }\n        free(filename);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153220",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * filename;\n            int fileDesc;\n            filename = TMPNAM(NULL);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153224",
        "code": "void test_snippet()\n{\n    {\n        char filename[MAX_PATH] = \"\";\n        int fileDesc;\n        \n        if (GetTempFileNameA(\".\", \"test_snippet\", 0, filename) == 0)\n        {\n            exit(1);\n        }\n        printLine(filename);\n        \n        fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        if (fileDesc != -1)\n        {\n            printLine(\"Temporary file was opened...now closing file\");\n            CLOSE(fileDesc);\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153109",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char * filename;\n            char tmpl[] = \"fnXXXXXX\";\n            int fileDesc;\n            filename = MKTEMP(tmpl);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n    else\n    {\n        {\n            char * filename;\n            char tmpl[] = \"fnXXXXXX\";\n            int fileDesc;\n            filename = MKTEMP(tmpl);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153143",
        "code": "void test_snippet()\n{\n    if(staticFive==5)\n    {\n        {\n            char * filename;\n            int fileDesc;\n            filename = TEMPNAM(NULL, NULL);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n            free(filename);\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE377"
    },
    {
        "UID": "153218",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            char * filename;\n            int fileDesc;\n            filename = TMPNAM(NULL);\n            if (filename == NULL)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n        break;\n    }\n}",
        "predicted": "377,Insecure Temporary File\n252,Unchecked Return Value\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE377"
    },
    {
        "UID": "153256",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char filename[MAX_PATH] = \"\";\n            int fileDesc;\n            \n            if (GetTempFileNameA(\".\", \"test_snippet\", 0, filename) == 0)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n    else\n    {\n        {\n            char filename[MAX_PATH] = \"\";\n            int fileDesc;\n            \n            \n            if (GetTempFileNameA(\".\", \"good\", rand() + 1, filename) == 0)\n            {\n                exit(1);\n            }\n            printLine(filename);\n            \n            fileDesc = OPEN(filename, O_RDWR|O_CREAT|O_EXCL, S_IREAD|S_IWRITE);\n            if (fileDesc != -1)\n            {\n                printLine(\"Temporary file was opened...now closing file\");\n                CLOSE(fileDesc);\n            }\n        }\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE377"
    },
    {
        "UID": "153514",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            try\n            {\n                string stringHello = \"hello\";\n                string stringSubstring = stringHello.substr(rand(), rand());\n                printLine(stringSubstring.c_str());\n            }\n            catch (out_of_range &)\n            {\n                \n            }\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE390"
    },
    {
        "UID": "153509",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        try\n        {\n            string stringHello = \"hello\";\n            string stringSubstring = stringHello.substr(rand(), rand());\n            printLine(stringSubstring.c_str());\n        }\n        catch (out_of_range &)\n        {\n            \n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE390"
    },
    {
        "UID": "153512",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            try\n            {\n                string stringHello = \"hello\";\n                string stringSubstring = stringHello.substr(rand(), rand());\n                printLine(stringSubstring.c_str());\n            }\n            catch (out_of_range &)\n            {\n                \n            }\n        }\n        break;\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\n126,Buffer Over-read",
        "CWE": "CWE390"
    },
    {
        "UID": "153705",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        double doubleNumber;\n        errno = 0; \n        doubleNumber = (double)sqrt((double)-1);\n        \n        if (errno == EDOM)\n        {\n            \n        }\n        printDoubleLine(doubleNumber);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE390"
    },
    {
        "UID": "153501",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            try\n            {\n                string stringHello = \"hello\";\n                string stringSubstring = stringHello.substr(rand(), rand());\n                printLine(stringSubstring.c_str());\n            }\n            catch (out_of_range &)\n            {\n                \n            }\n        }\n    }\n    else\n    {\n        {\n            try\n            {\n                string stringHello = \"hello\";\n                string stringSubstring = stringHello.substr(rand(), rand());\n                printLine(stringSubstring.c_str());\n            }\n            catch (out_of_range &)\n            {\n                \n                printLine(\"Range specified was invalid\");\n                exit(1);\n            }\n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE390"
    },
    {
        "UID": "153516",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        try\n        {\n            string stringHello = \"hello\";\n            string stringSubstring = stringHello.substr(rand(), rand());\n            printLine(stringSubstring.c_str());\n        }\n        catch (out_of_range &)\n        {\n            \n        }\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE390"
    },
    {
        "UID": "153610",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            \n            wchar_t dataBuffer[100] = L\"\";\n            wchar_t * data = dataBuffer;\n            printWLine(L\"Please enter a string: \");\n            \n            if (fgetws(data, 100, stdin) == NULL)\n            {\n                \n            }\n            printWLine(data);\n        }\n        break;\n    }\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value\n390,Detection of Error Condition Without Action",
        "CWE": "CWE390"
    },
    {
        "UID": "153614",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        \n        wchar_t dataBuffer[100] = L\"\";\n        wchar_t * data = dataBuffer;\n        printWLine(L\"Please enter a string: \");\n        \n        if (fgetws(data, 100, stdin) == NULL)\n        {\n            \n        }\n        printWLine(data);\n    }\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value",
        "CWE": "CWE390"
    },
    {
        "UID": "153661",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            FILE * fileDesc = NULL;\n            fileDesc = fopen(\"file.txt\", \"w+\");\n            \n            if (fileDesc == NULL)\n            {\n                \n            }\n            fclose(fileDesc);\n        }\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE390"
    },
    {
        "UID": "153710",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            double doubleNumber;\n            errno = 0; \n            doubleNumber = (double)sqrt((double)-1);\n            \n            if (errno == EDOM)\n            {\n                \n            }\n            printDoubleLine(doubleNumber);\n        }\n    }\n}",
        "predicted": "369,Divide By Zero\n252,Unchecked Return Value\n480,Use of Incorrect Operator",
        "CWE": "CWE390"
    },
    {
        "UID": "153768",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        {\n            long longNumber;\n            longNumber = strtol(\"0xfffffffff\", NULL, 0);\n            \n            printf(\"%li\\n\", longNumber);\n        }\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE391"
    },
    {
        "UID": "153857",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            size_t bytesTranslated = 0;\n            char charString[100];\n            charString[0] = '\\0';\n            bytesTranslated = wcstombs((char *)&charString, L\"\\xffff\", 100);\n            \n            printUnsignedLine(bytesTranslated);\n            printLine(charString);\n        }\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE391"
    },
    {
        "UID": "153817",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        {\n            size_t bytesTranslated = 0;\n            char charString[100];\n            charString[0] = '\\0';\n            bytesTranslated = wcstombs((char *)&charString, L\"\\xffff\", 100);\n            \n            printUnsignedLine(bytesTranslated);\n            printLine(charString);\n        }\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE391"
    },
    {
        "UID": "153757",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            double doubleNumber;\n            doubleNumber = (double)sqrt((double)-1);\n            \n            printDoubleLine(doubleNumber);\n        }\n        break;\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE391"
    },
    {
        "UID": "153754",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        double doubleNumber;\n        doubleNumber = (double)sqrt((double)-1);\n        \n        printDoubleLine(doubleNumber);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "369,Divide By Zero",
        "CWE": "CWE391"
    },
    {
        "UID": "153808",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            long longNumber;\n            longNumber = strtol(\"0xfffffffff\", NULL, 0);\n            \n            printf(\"%li\\n\", longNumber);\n        }\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE391"
    },
    {
        "UID": "153810",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        long longNumber;\n        longNumber = strtol(\"0xfffffffff\", NULL, 0);\n        \n        printf(\"%li\\n\", longNumber);\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE391"
    },
    {
        "UID": "153806",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            long longNumber;\n            longNumber = strtol(\"0xfffffffff\", NULL, 0);\n            \n            printf(\"%li\\n\", longNumber);\n        }\n        break;\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound",
        "CWE": "CWE391"
    },
    {
        "UID": "153844",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            size_t bytesTranslated = 0;\n            char charString[100];\n            charString[0] = '\\0';\n            bytesTranslated = wcstombs((char *)&charString, L\"\\xffff\", 100);\n            \n            printUnsignedLine(bytesTranslated);\n            printLine(charString);\n        }\n    }\n    else\n    {\n        {\n            size_t bytesTranslated = 0;\n            char charString[100];\n            charString[0] = '\\0';\n            errno = 0; \n            bytesTranslated = wcstombs((char *)&charString, L\"\\xffff\", 100);\n            \n            if (errno == EILSEQ)\n            {\n                printLine(\"wcstombs() failed\");\n                exit(1);\n            }\n            printUnsignedLine(bytesTranslated);\n            printLine(charString);\n        }\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding",
        "CWE": "CWE391"
    },
    {
        "UID": "153859",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        size_t bytesTranslated = 0;\n        char charString[100];\n        charString[0] = '\\0';\n        bytesTranslated = wcstombs((char *)&charString, L\"\\xffff\", 100);\n        \n        printUnsignedLine(bytesTranslated);\n        printLine(charString);\n    }\n}",
        "predicted": "176,Improper Handling of Unicode Encoding\n121,Stack-based Buffer Overflow",
        "CWE": "CWE391"
    },
    {
        "UID": "154055",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    \n    throw exception();\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154010",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154019",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154048",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n        \n        throw exception();\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154013",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154031",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154040",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        throw exception();\n    }\n    else\n    {\n        \n        throw range_error(\"Test\");\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154051",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        throw exception();\n        break;\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154016",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "154028",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        \n        throw exception();\n    }\n}",
        "predicted": "397,Declaration of Throws for Generic Exception",
        "CWE": "CWE397"
    },
    {
        "UID": "156335",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    switch(6)\n    {\n    case 6:\n        \n        fscanf(stdin, \"%d\", &count);\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        size_t i = 0;\n        FILE *pFile = NULL;\n        const char *filename = \"output_test_snippet.txt\";\n        pFile = fopen(filename, \"w+\");\n        if (pFile == NULL)\n        {\n            exit(1);\n        }\n        \n        for (i = 0; i < (size_t)count; i++)\n        {\n            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))\n            {\n                exit(1);\n            }\n        }\n        if (pFile)\n        {\n            fclose(pFile);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition\n400,Uncontrolled Resource Consumption",
        "CWE": "CWE400"
    },
    {
        "UID": "154766",
        "code": "void CWE400_Resource_Exhaustion__connect_socket_for_loop_67bSink(CWE400_Resource_Exhaustion__connect_socket_for_loop_67_structType test_snippet\n{\n    int count = myStruct.structFirst;\n    {\n        size_t i = 0;\n        \n        for (i = 0; i < (size_t)count; i++)\n        {\n            printLine(\"Hello\");\n        }\n    }\n}",
        "predicted": "400,Uncontrolled Resource Consumption",
        "CWE": "CWE400"
    },
    {
        "UID": "157709",
        "code": "void test_snippet()\n{\n    int count;\n    int countArray[5];\n    \n    count = -1;\n    \n    count = RAND32();\n    \n    countArray[2] = count;\n    test_snippetSink(countArray);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE400"
    },
    {
        "UID": "157608",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    \n    count = RAND32();\n    test_snippetSink(count);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE400"
    },
    {
        "UID": "155293",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    if(5==5)\n    {\n        {\n            char inputBuffer[CHAR_ARRAY_SIZE] = \"\";\n            \n            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)\n            {\n                \n                count = atoi(inputBuffer);\n            }\n            else\n            {\n                printLine(\"fgets() failed.\");\n            }\n        }\n    }\n    if(5==5)\n    {\n        {\n            size_t i = 0;\n            \n            for (i = 0; i < (size_t)count; i++)\n            {\n                printLine(\"Hello\");\n            }\n        }\n    }\n}",
        "predicted": "190,Integer Overflow or Wraparound\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE400"
    },
    {
        "UID": "156402",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    \n    fscanf(stdin, \"%d\", &count);\n    test_snippetData = count;\n    test_snippetSink();\n}",
        "predicted": "252,Unchecked Return Value\n191,Integer Underflow (Wrap or Wraparound)",
        "CWE": "CWE400"
    },
    {
        "UID": "154889",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        char inputBuffer[CHAR_ARRAY_SIZE];\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            inputBuffer[recvResult] = '\\0';\n            \n            count = atoi(inputBuffer);\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        int countCopy = count;\n        int count = countCopy;\n        {\n            size_t i = 0;\n            FILE *pFile = NULL;\n            const char *filename = \"output_test_snippet.txt\";\n            pFile = fopen(filename, \"w+\");\n            if (pFile == NULL)\n            {\n                exit(1);\n            }\n            \n            for (i = 0; i < (size_t)count; i++)\n            {\n                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))\n                {\n                    exit(1);\n                }\n            }\n            if (pFile)\n            {\n                fclose(pFile);\n            }\n        }\n    }\n}",
        "predicted": "400,Uncontrolled Resource Consumption",
        "CWE": "CWE400"
    },
    {
        "UID": "157826",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    \n    count = RAND32();\n    test_snippetStatic = 1; \n    test_snippetSink(count);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE400"
    },
    {
        "UID": "158087",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    \n    count = RAND32();\n    {\n        int countCopy = count;\n        int count = countCopy;\n        \n        SLEEP(count);\n        printLine(\"Sleep time possibly too long\");\n    }\n}",
        "predicted": "400,Uncontrolled Resource Consumption",
        "CWE": "CWE400"
    },
    {
        "UID": "155092",
        "code": "void test_snippet()\n{\n    int count;\n    \n    count = -1;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            char inputBuffer[CHAR_ARRAY_SIZE];\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                inputBuffer[recvResult] = '\\0';\n                \n                count = atoi(inputBuffer);\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    else\n    {\n        \n        count = 20;\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        SLEEP(count);\n        printLine(\"Sleep time possibly too long\");\n    }\n    else\n    {\n        \n        if (count > 0 && count <= 2000)\n        {\n            SLEEP(count);\n            printLine(\"Sleep time OK\");\n        }\n        else\n        {\n            printLine(\"Sleep time too long\");\n        }\n    }\n}",
        "predicted": "400,Uncontrolled Resource Consumption",
        "CWE": "CWE400"
    },
    {
        "UID": "163529",
        "code": "static void test_snippet()\n{\n    twoIntsStruct * data = CWE401_Memory_Leak__new_twoIntsStruct_45Data;\n    \n    ; \n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE401"
    },
    {
        "UID": "160169",
        "code": "void test_snippet()\n{\n    int * data;\n    int * dataArray[5];\n    data = NULL;\n    \n    data = (int *)malloc(100*sizeof(int));\n    if (data == NULL) {exit(-1);}\n    \n    data[0] = 5;\n    printIntLine(data[0]);\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE401"
    },
    {
        "UID": "160145",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL;\n    test_snippetSource(data);\n    \n    ; \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE401"
    },
    {
        "UID": "164333",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    list<wchar_t *> dataList;\n    data = NULL;\n    {\n        wchar_t myString[] = L\"myString\";\n        \n        data = wcsdup(myString);\n        \n        printWLine(data);\n    }\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE401"
    },
    {
        "UID": "162845",
        "code": "void test_snippet()\n{\n    int * data;\n    int * &dataRef = data;\n    data = NULL;\n    \n    data = new int;\n    \n    *data = 5;\n    printIntLine(*data);\n    {\n        int * data = dataRef;\n        \n        ; \n    }\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free\n416,Use After Free",
        "CWE": "CWE401"
    },
    {
        "UID": "162179",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t * &dataRef = data;\n    data = NULL;\n    \n    data = new wchar_t[100];\n    \n    wcscpy(data, L\"A String\");\n    printWLine(data);\n    {\n        wchar_t * data = dataRef;\n        \n        ; \n    }\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE401"
    },
    {
        "UID": "163974",
        "code": "void test_snippet()\n{\n    char * data;\n    data = NULL;\n    test_snippetSource(data);\n    \n    \n    ; \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE401"
    },
    {
        "UID": "164315",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    CWE401_Memory_Leak__strdup_wchar_t_67_structType myStruct;\n    data = NULL;\n    {\n        wchar_t myString[] = L\"myString\";\n        \n        data = wcsdup(myString);\n        \n        printWLine(data);\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE401"
    },
    {
        "UID": "162731",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    list<int64_t *> dataList;\n    data = NULL;\n    \n    data = new int64_t;\n    \n    *data = 5LL;\n    printLongLongLine(*data);\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE401"
    },
    {
        "UID": "161087",
        "code": "static void test_snippet()\n{\n    int64_t * data = CWE401_Memory_Leak__new_array_int64_t_45Data;\n    \n    ; \n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE401"
    },
    {
        "UID": "166645",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE404"
    },
    {
        "UID": "167187",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    \n    data = freopen(\"BadSource_freopen.txt\",\"w+\",stdin);\n    test_snippetDataForBadSink = data;\n    test_snippetSink();\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE404"
    },
    {
        "UID": "166966",
        "code": "static void test_snippet()\n{\n    FILE * data = CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_45Data;\n    if (data != NULL)\n    {\n        \n        CloseHandle((HANDLE)data);\n    }\n}",
        "predicted": "404,Improper Resource Shutdown or Release",
        "CWE": "CWE404"
    },
    {
        "UID": "167668",
        "code": "void CWE404_Improper_Resource_Shutdown__w32CreateFile_close_67bSink(CWE404_Improper_Resource_Shutdown__w32CreateFile_close_67_structType test_snippet\n{\n    HANDLE data = myStruct.structFirst;\n    if (data != INVALID_HANDLE_VALUE)\n    {\n        \n        _close((int)data);\n    }\n}",
        "predicted": "404,Improper Resource Shutdown or Release",
        "CWE": "CWE404"
    },
    {
        "UID": "166614",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "252,Unchecked Return Value\n404,Improper Resource Shutdown or Release\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE404"
    },
    {
        "UID": "167097",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    \n    data = freopen(\"BadSource_freopen.txt\",\"w+\",stdin);\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE404"
    },
    {
        "UID": "167362",
        "code": "void CWE404_Improper_Resource_Shutdown__open_fclose_74bSink(map<int, int> test_snippet\n{\n    \n    int data = dataMap[2];\n    if (data != -1)\n    {\n        \n        fclose((FILE *)data);\n    }\n}",
        "predicted": "404,Improper Resource Shutdown or Release",
        "CWE": "CWE404"
    },
    {
        "UID": "167346",
        "code": "void CWE404_Improper_Resource_Shutdown__open_fclose_67bSink(CWE404_Improper_Resource_Shutdown__open_fclose_67_structType test_snippet\n{\n    int data = myStruct.structFirst;\n    if (data != -1)\n    {\n        \n        fclose((FILE *)data);\n    }\n}",
        "predicted": "404,Improper Resource Shutdown or Release",
        "CWE": "CWE404"
    },
    {
        "UID": "166698",
        "code": "void CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_66bSink(FILE * test_snippet\n{\n    \n    FILE * data = dataArray[2];\n    if (data != NULL)\n    {\n        \n        CloseHandle((HANDLE)data);\n    }\n}",
        "predicted": "404,Improper Resource Shutdown or Release",
        "CWE": "CWE404"
    },
    {
        "UID": "167446",
        "code": "void test_snippet()\n{\n    int data;\n    \n    void (*funcPtr) (int) = test_snippetSink;\n    \n    data = -1;\n    \n    data = OPEN(\"BadSource_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    \n    funcPtr(data);\n}",
        "predicted": "252,Unchecked Return Value\n404,Improper Resource Shutdown or Release\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE404"
    },
    {
        "UID": "169962",
        "code": "void CWE415_Double_Free__new_delete_array_int64_t_52bSink_b(int64_t * test_snippet\n{\n    CWE415_Double_Free__new_delete_array_int64_t_52bSink_c(test_snippet;\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE415"
    },
    {
        "UID": "168207",
        "code": "static int64_t * CWE415_Double_Free__malloc_free_int64_t_42Source(int64_t * test_snippet\n{\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    \n    free(test_snippet;\n    return data;\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE415"
    },
    {
        "UID": "168315",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    \n    data = NULL;\n    data = (int64_t *)malloc(100*sizeof(int64_t));\n    if (data == NULL) {exit(-1);}\n    \n    free(data);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "171270",
        "code": "void test_snippet()\n{\n    char * data = CWE415_Double_Free__new_delete_char_68bData;\n    \n    delete data;\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE415"
    },
    {
        "UID": "170880",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    data = NULL;\n    data = new wchar_t[100];\n    \n    delete [] data;\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "168912",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    \n    data = NULL;\n    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    \n    free(data);\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "169346",
        "code": "void test_snippet()\n{\n    char * data;\n    \n    data = NULL;\n    if(STATIC_CONST_FIVE==5)\n    {\n        data = new char[100];\n        \n        delete [] data;\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        delete [] data;\n    }\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE415"
    },
    {
        "UID": "170769",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    structType myStruct;\n    \n    data = NULL;\n    data = new twoIntsStruct[100];\n    \n    delete [] data;\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "172458",
        "code": "twoIntsStruct * CWE415_Double_Free__new_delete_struct_61bSource(twoIntsStruct * test_snippet\n{\n    data = new twoIntsStruct;\n    \n    delete data;\n    return data;\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "172725",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    void (*funcPtr) (wchar_t *) = test_snippetSink;\n    \n    data = NULL;\n    data = new wchar_t;\n    \n    delete data;\n    \n    funcPtr(data);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE415"
    },
    {
        "UID": "174835",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    data = NULL;\n    data = new wchar_t;\n    *data = L'A';\n    \n    delete data;\n    test_snippetSink(&data);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "173278",
        "code": "void CWE416_Use_After_Free__malloc_free_struct_63bSink(twoIntsStruct * * test_snippet\n{\n    twoIntsStruct * data = *dataPtr;\n    \n    printStructLine(&data[0]);\n    \n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "174725",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    \n    data = NULL;\n    test_snippetSource(data);\n    \n    printStructLine(data);\n    \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE416"
    },
    {
        "UID": "172848",
        "code": "void test_snippet()\n{\n    char * data;\n    \n    data = NULL;\n    test_snippetSource(data);\n    \n    printLine(data);\n    \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE416"
    },
    {
        "UID": "173572",
        "code": "void test_snippet()\n{\n    TwoIntsClass * data;\n    \n    data = NULL;\n    goto source;\nsource:\n    data = new TwoIntsClass[100];\n    {\n        size_t i;\n        for(i = 0; i < 100; i++)\n        {\n            data[i].intOne = 1;\n            data[i].intTwo = 2;\n        }\n    }\n    \n    delete [] data;\n    goto sink;\nsink:\n    \n    printIntLine(data[0].intOne);\n    \n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "173174",
        "code": "void CWE416_Use_After_Free__malloc_free_long_63bSink(long * * test_snippet\n{\n    long * data = *dataPtr;\n    \n    printLongLine(data[0]);\n    \n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "174413",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    \n    data = NULL;\n    test_snippetSource(data);\n    \n    printLongLongLine(*data);\n    \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE416"
    },
    {
        "UID": "174340",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    \n    data = NULL;\n    if(STATIC_CONST_TRUE)\n    {\n        data = new int64_t;\n        *data = 5LL;\n        \n        delete data;\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        \n        printLongLongLine(*data);\n        \n    }\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "173264",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    \n    data = NULL;\n    test_snippetSource(data);\n    \n    printStructLine(&data[0]);\n    \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE416"
    },
    {
        "UID": "174609",
        "code": "void test_snippet()\n{\n    int i,j;\n    long * data;\n    \n    data = NULL;\n    for(i = 0; i < 1; i++)\n    {\n        data = new long;\n        *data = 5L;\n        \n        delete data;\n    }\n    for(j = 0; j < 1; j++)\n    {\n        \n        printLongLine(*data);\n        \n    }\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE416"
    },
    {
        "UID": "176913",
        "code": "static void test_snippet()\n{\n    wchar_t * data = CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_45Data;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "175625",
        "code": "static void test_snippet()\n{\n    char * data = CWE427_Uncontrolled_Search_Path_Element__char_connect_socket_45Data;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "176009",
        "code": "void test_snippet()\n{\n    char * data = CWE427_Uncontrolled_Search_Path_Element__char_environment_68bData;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "175848",
        "code": "void test_snippet()\n{\n    char * data = CWE427_Uncontrolled_Search_Path_Element__char_console_68bData;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "176975",
        "code": "void test_snippet()\n{\n    wchar_t * data = CWE427_Uncontrolled_Search_Path_Element__wchar_t_file_68bData;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "176649",
        "code": "void CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_67bSink(CWE427_Uncontrolled_Search_Path_Element__wchar_t_console_67_structType test_snippet\n{\n    wchar_t * data = myStruct.structFirst;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "176792",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[250] = L\"PATH=\";\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = wcslen(data);\n        wchar_t * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            wcsncat(data+dataLen, environment, 250-dataLen-1);\n        }\n    }\n    test_snippetSink(&data);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE427"
    },
    {
        "UID": "176883",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[250] = L\"PATH=\";\n    data = dataBuffer;\n    test_snippetGlobal = 1; \n    data = test_snippetSource(data);\n    \n    PUTENV(data);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE427"
    },
    {
        "UID": "176538",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[250] = L\"PATH=\";\n    data = dataBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            \n            size_t dataLen = wcslen(data);\n            \n            if (250-dataLen > 1)\n            {\n                \n                if (fgetws(data+dataLen, (int)(250-dataLen), stdin) != NULL)\n                {\n                    \n                    dataLen = wcslen(data);\n                    if (dataLen > 0 && data[dataLen-1] == L'\\n')\n                    {\n                        data[dataLen-1] = L'\\0';\n                    }\n                }\n                else\n                {\n                    printLine(\"fgetws() failed\");\n                    \n                    data[dataLen] = L'\\0';\n                }\n            }\n        }\n    }\n    else\n    {\n        \n        wcscat(data, NEW_PATH);\n    }\n    \n    PUTENV(data);\n}",
        "predicted": "15,External Control of System or Configuration Setting\n78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE427"
    },
    {
        "UID": "176108",
        "code": "static void test_snippet()\n{\n    char * data = CWE427_Uncontrolled_Search_Path_Element__char_file_45Data;\n    \n    PUTENV(data);\n}",
        "predicted": "427,Uncontrolled Search Path Element",
        "CWE": "CWE427"
    },
    {
        "UID": "181566",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    if(globalReturnsTrue())\n    {\n        \n        ; \n    }\n    if(globalReturnsTrue())\n    {\n        \n        printWLine(data);\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n476,NULL Pointer Dereference",
        "CWE": "CWE457"
    },
    {
        "UID": "178063",
        "code": "void test_snippet()\n{\n    double * data;\n    test_snippetSource(data);\n    \n    printDoubleLine(*data);\n}",
        "predicted": "457,Use of Uninitialized Variable\n476,NULL Pointer Dereference",
        "CWE": "CWE457"
    },
    {
        "UID": "180136",
        "code": "void test_snippet()\n{\n    int i,j;\n    twoIntsStruct * data;\n    twoIntsStruct dataUninitArray[10];\n    data = dataUninitArray;\n    for(i = 0; i < 1; i++)\n    {\n        \n        ; \n    }\n    for(j = 0; j < 1; j++)\n    {\n        \n        {\n            int i;\n            for(i=0; i<10; i++)\n            {\n                printIntLine(data[i].intOne);\n                printIntLine(data[i].intTwo);\n            }\n        }\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "178000",
        "code": "void test_snippet()\n{\n    double * data;\n    if(staticTrue)\n    {\n        \n        ; \n    }\n    if(staticTrue)\n    {\n        \n        printDoubleLine(*data);\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n476,NULL Pointer Dereference",
        "CWE": "CWE457"
    },
    {
        "UID": "178124",
        "code": "void test_snippet()\n{\n    int64_t data;\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        ; \n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        printLongLongLine(data);\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "179060",
        "code": "void test_snippet()\n{\n    long data;\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        ; \n    }\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        printLongLine(data);\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "180610",
        "code": "void test_snippet()\n{\n    TwoIntsClass data;\n    if(staticFive==5)\n    {\n        \n        ; \n    }\n    if(staticFive==5)\n    {\n        \n        printIntLine(data.intOne);\n        printIntLine(data.intTwo);\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "177352",
        "code": "void test_snippet()\n{\n    double data;\n    \n    ; \n    test_snippetSink(&data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "180362",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    data = (twoIntsStruct *)malloc(10*sizeof(twoIntsStruct));\n    if (data == NULL) {exit(-1);}\n    \n    ; \n    test_snippetSink(&data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE457"
    },
    {
        "UID": "177239",
        "code": "void CWE457_Use_of_Uninitialized_Variable__char_pointer_62bSource(char * test_snippet\n{\n    \n    ; \n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE457"
    },
    {
        "UID": "181671",
        "code": "void test_snippet()\n{\n    {\n        wchar_t * filename;\n        wchar_t tmpl[] = L\"test_snippetXXXXXX\";\n        FILE *pFile;\n        \n        filename = MKTEMP(tmpl);\n        if (filename != NULL)\n        {\n            pFile = FOPEN(filename, L\"w\");\n            if (pFile != NULL)\n            {\n                fprintf(pFile, \"Temporary file\");\n                fclose(pFile);\n                \n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE459"
    },
    {
        "UID": "181669",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        char filename[] = \"test_snippetXXXXXX\";\n        FILE *pFile;\n        \n        int fileDesc = MKSTEMP(filename);\n        if (fileDesc != -1)\n        {\n            pFile = FDOPEN(fileDesc, \"w\");\n            if (pFile != NULL)\n            {\n                fprintf(pFile, \"Temporary file\");\n                fclose(pFile);\n                \n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181703",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            wchar_t * filename;\n            wchar_t tmpl[] = L\"test_snippetXXXXXX\";\n            FILE *pFile;\n            \n            filename = MKTEMP(tmpl);\n            if (filename != NULL)\n            {\n                pFile = FOPEN(filename, L\"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                }\n            }\n        }\n    }\n    else\n    {\n        {\n            wchar_t * filename;\n            wchar_t tmpl[] = L\"goodXXXXXX\";\n            FILE *pFile;\n            \n            filename = MKTEMP(tmpl);\n            if (filename != NULL)\n            {\n                pFile = FOPEN(filename, L\"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                    UNLINK(filename); \n                }\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181633",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        {\n            char filename[] = \"test_snippetXXXXXX\";\n            FILE *pFile;\n            \n            int fileDesc = MKSTEMP(filename);\n            if (fileDesc != -1)\n            {\n                pFile = FDOPEN(fileDesc, \"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                }\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181711",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        wchar_t * filename;\n        wchar_t tmpl[] = L\"test_snippetXXXXXX\";\n        FILE *pFile;\n        \n        filename = MKTEMP(tmpl);\n        if (filename != NULL)\n        {\n            pFile = FOPEN(filename, L\"w\");\n            if (pFile != NULL)\n            {\n                fprintf(pFile, \"Temporary file\");\n                fclose(pFile);\n                \n            }\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE459"
    },
    {
        "UID": "181667",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char filename[] = \"test_snippetXXXXXX\";\n            FILE *pFile;\n            \n            int fileDesc = MKSTEMP(filename);\n            if (fileDesc != -1)\n            {\n                pFile = FDOPEN(fileDesc, \"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                }\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181716",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            wchar_t * filename;\n            wchar_t tmpl[] = L\"test_snippetXXXXXX\";\n            FILE *pFile;\n            \n            filename = MKTEMP(tmpl);\n            if (filename != NULL)\n            {\n                pFile = FOPEN(filename, L\"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                }\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE459"
    },
    {
        "UID": "181636",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            char filename[] = \"test_snippetXXXXXX\";\n            FILE *pFile;\n            \n            int fileDesc = MKSTEMP(filename);\n            if (fileDesc != -1)\n            {\n                pFile = FDOPEN(fileDesc, \"w\");\n                if (pFile != NULL)\n                {\n                    fprintf(pFile, \"Temporary file\");\n                    fclose(pFile);\n                    \n                }\n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181622",
        "code": "void test_snippet()\n{\n    {\n        char filename[] = \"test_snippetXXXXXX\";\n        FILE *pFile;\n        \n        int fileDesc = MKSTEMP(filename);\n        if (fileDesc != -1)\n        {\n            pFile = FDOPEN(fileDesc, \"w\");\n            if (pFile != NULL)\n            {\n                fprintf(pFile, \"Temporary file\");\n                fclose(pFile);\n                \n            }\n        }\n    }\n}",
        "predicted": "377,Insecure Temporary File\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE459"
    },
    {
        "UID": "181662",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        char filename[] = \"test_snippetXXXXXX\";\n        FILE *pFile;\n        \n        int fileDesc = MKSTEMP(filename);\n        if (fileDesc != -1)\n        {\n            pFile = FDOPEN(fileDesc, \"w\");\n            if (pFile != NULL)\n            {\n                fprintf(pFile, \"Temporary file\");\n                fclose(pFile);\n                \n            }\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE459"
    },
    {
        "UID": "181863",
        "code": "void CWE464_Addition_of_Data_Structure_Sentinel__basic_67bSink(CWE464_Addition_of_Data_Structure_Sentinel__basic_67_structType test_snippet\n{\n    char data = myStruct.structFirst;\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "464,Addition of Data Structure Sentinel",
        "CWE": "CWE464"
    },
    {
        "UID": "181765",
        "code": "void test_snippet()\n{\n    int i;\n    char data;\n    data = ' ';\n    for(i = 0; i < 1; i++)\n    {\n        {\n            char charArraySource[2];\n            charArraySource[0] = (char)getc(stdin);\n            charArraySource[1] = '\\0';\n            \n            data = (char)atoi(charArraySource);\n        }\n    }\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "252,Unchecked Return Value\n197,Numeric Truncation Error\n20,Improper Input Validation",
        "CWE": "CWE464"
    },
    {
        "UID": "181752",
        "code": "void test_snippet()\n{\n    char data;\n    data = ' ';\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            char charArraySource[2];\n            charArraySource[0] = (char)getc(stdin);\n            charArraySource[1] = '\\0';\n            \n            data = (char)atoi(charArraySource);\n        }\n    }\n    else\n    {\n        \n        data = 'a';\n    }\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "252,Unchecked Return Value\n197,Numeric Truncation Error\n20,Improper Input Validation",
        "CWE": "CWE464"
    },
    {
        "UID": "181801",
        "code": "static void CWE464_Addition_of_Data_Structure_Sentinel__basic_44Sink(char test_snippet\n{\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE464"
    },
    {
        "UID": "181769",
        "code": "static char CWE464_Addition_of_Data_Structure_Sentinel__basic_21Source(char test_snippet\n{\n    if(CWE464_Addition_of_Data_Structure_Sentinel__basic_21Static)\n    {\n        {\n            char charArraySource[2];\n            charArraySource[0] = (char)getc(stdin);\n            charArraySource[1] = '\\0';\n            \n            data = (char)atoi(charArraySource);\n        }\n    }\n    return data;\n}",
        "predicted": "464,Addition of Data Structure Sentinel",
        "CWE": "CWE464"
    },
    {
        "UID": "181875",
        "code": "void CWE464_Addition_of_Data_Structure_Sentinel__basic_73bSink(list<char> test_snippet\n{\n    \n    char data = dataList.back();\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "464,Addition of Data Structure Sentinel",
        "CWE": "CWE464"
    },
    {
        "UID": "181851",
        "code": "void CWE464_Addition_of_Data_Structure_Sentinel__basic_64bSink(void * test_snippet\n{\n    \n    char * dataPtr = (char *)dataVoidPtr;\n    \n    char data = (*dataPtr);\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "464,Addition of Data Structure Sentinel",
        "CWE": "CWE464"
    },
    {
        "UID": "181879",
        "code": "void CWE464_Addition_of_Data_Structure_Sentinel__basic_74bSink(map<int, char> test_snippet\n{\n    \n    char data = dataMap[2];\n    {\n        char charArraySink[4];\n        charArraySink[0] = 'x';\n        \n        charArraySink[1] = data;\n        charArraySink[2] = 'z';\n        charArraySink[3] = '\\0';\n        printLine(charArraySink);\n    }\n}",
        "predicted": "464,Addition of Data Structure Sentinel",
        "CWE": "CWE464"
    },
    {
        "UID": "181790",
        "code": "void test_snippet()\n{\n    char data;\n    data = ' ';\n    {\n        char charArraySource[2];\n        charArraySource[0] = (char)getc(stdin);\n        charArraySource[1] = '\\0';\n        \n        data = (char)atoi(charArraySource);\n    }\n    test_snippetSink(data);\n}",
        "predicted": "20,Improper Input Validation\n190,Integer Overflow or Wraparound\n195,Signed to Unsigned Conversion Error\n252,Unchecked Return Value\n476,NULL Pointer Dereference\n680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE464"
    },
    {
        "UID": "181869",
        "code": "void test_snippet()\n{\n    char data;\n    vector<char> dataVector;\n    data = ' ';\n    {\n        char charArraySource[2];\n        charArraySource[0] = (char)getc(stdin);\n        charArraySource[1] = '\\0';\n        \n        data = (char)atoi(charArraySource);\n    }\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "252,Unchecked Return Value\n253,Incorrect Check of Function Return Value\n197,Numeric Truncation Error\n457,Use of Uninitialized Variable\n20,Improper Input Validation",
        "CWE": "CWE464"
    },
    {
        "UID": "182016",
        "code": "void test_snippet()\n{\n    if(globalFive==5)\n    {\n        {\n            short * test_snippetShort = NULL;\n            \n            test_snippetShort = (short *)malloc(sizeof(test_snippetShort));\n            if (test_snippetShort == NULL) {exit(-1);}\n            *test_snippetShort = 5;\n            printShortLine(*test_snippetShort);\n            free(test_snippetShort);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181892",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        {\n            char * test_snippetChar = NULL;\n            \n            test_snippetChar = (char *)malloc(sizeof(test_snippetChar));\n            if (test_snippetChar == NULL) {exit(-1);}\n            *test_snippetChar = 'B';\n            printHexCharLine(*test_snippetChar);\n            free(test_snippetChar);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181924",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            char * test_snippetChar = NULL;\n            \n            test_snippetChar = (char *)malloc(sizeof(test_snippetChar));\n            if (test_snippetChar == NULL) {exit(-1);}\n            *test_snippetChar = 'B';\n            printHexCharLine(*test_snippetChar);\n            free(test_snippetChar);\n        }\n        break;\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181962",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            int * test_snippetInt = NULL;\n            \n            test_snippetInt = (int *)malloc(sizeof(test_snippetInt));\n            if (test_snippetInt == NULL) {exit(-1);}\n            *test_snippetInt = 5;\n            printIntLine(*test_snippetInt);\n            free(test_snippetInt);\n        }\n    }\n    else\n    {\n        {\n            int * goodInt = NULL;\n            \n            goodInt = (int *)malloc(sizeof(*goodInt));\n            if (goodInt == NULL) {exit(-1);}\n            *goodInt = 6;\n            printIntLine(*goodInt);\n            free(goodInt);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "182026",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        short * test_snippetShort = NULL;\n        \n        test_snippetShort = (short *)malloc(sizeof(test_snippetShort));\n        if (test_snippetShort == NULL) {exit(-1);}\n        *test_snippetShort = 5;\n        printShortLine(*test_snippetShort);\n        free(test_snippetShort);\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181926",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            char * test_snippetChar = NULL;\n            \n            test_snippetChar = (char *)malloc(sizeof(test_snippetChar));\n            if (test_snippetChar == NULL) {exit(-1);}\n            *test_snippetChar = 'B';\n            printHexCharLine(*test_snippetChar);\n            free(test_snippetChar);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181930",
        "code": "void test_snippet()\n{\n    {\n        int * test_snippetInt = NULL;\n        \n        test_snippetInt = (int *)malloc(sizeof(test_snippetInt));\n        if (test_snippetInt == NULL) {exit(-1);}\n        *test_snippetInt = 5;\n        printIntLine(*test_snippetInt);\n        free(test_snippetInt);\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181996",
        "code": "void test_snippet()\n{\n    if(staticFive==5)\n    {\n        {\n            short * test_snippetShort = NULL;\n            \n            test_snippetShort = (short *)malloc(sizeof(test_snippetShort));\n            if (test_snippetShort == NULL) {exit(-1);}\n            *test_snippetShort = 5;\n            printShortLine(*test_snippetShort);\n            free(test_snippetShort);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181993",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            short * test_snippetShort = NULL;\n            \n            test_snippetShort = (short *)malloc(sizeof(test_snippetShort));\n            if (test_snippetShort == NULL) {exit(-1);}\n            *test_snippetShort = 5;\n            printShortLine(*test_snippetShort);\n            free(test_snippetShort);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "181999",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        {\n            short * test_snippetShort = NULL;\n            \n            test_snippetShort = (short *)malloc(sizeof(test_snippetShort));\n            if (test_snippetShort == NULL) {exit(-1);}\n            *test_snippetShort = 5;\n            printShortLine(*test_snippetShort);\n            free(test_snippetShort);\n        }\n    }\n}",
        "predicted": "467,Use of sizeof() on a Pointer Type\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE467"
    },
    {
        "UID": "183461",
        "code": "void test_snippet()\n{\n    long * data;\n    \n    data = NULL;\n    test_snippetSink(data);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "183326",
        "code": "void test_snippet()\n{\n    long * data;\n    if(staticTrue)\n    {\n        \n        data = NULL;\n    }\n    if(staticTrue)\n    {\n        \n        printLongLine(*data);\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "182734",
        "code": "void test_snippet()\n{\n    TwoIntsClass * data;\n    \n    data = NULL;\n    test_snippetSink_b(data);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "182788",
        "code": "void CWE476_NULL_Pointer_Dereference__class_67bSink(structType test_snippet\n{\n    TwoIntsClass * data = myStruct.structFirst;\n    \n    printIntLine(data->intOne);\n    \n    delete data;\n}",
        "predicted": "476,NULL Pointer Dereference\n415,Double Free",
        "CWE": "CWE476"
    },
    {
        "UID": "183720",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    \n    data = NULL;\n    test_snippetSink(data);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "183587",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    if(5==5)\n    {\n        \n        data = NULL;\n    }\n    if(5==5)\n    {\n        \n        printIntLine(data->intOne);\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "183969",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    data = NULL;\n    test_snippetSink(&data);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "182542",
        "code": "void CWE476_NULL_Pointer_Dereference__char_63bSink(char * * test_snippet\n{\n    char * data = *dataPtr;\n    \n    \n    printHexCharLine(data[0]);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "183065",
        "code": "void test_snippet()\n{\n    int64_t * data = CWE476_NULL_Pointer_Dereference__int64_t_68bData;\n    \n    printLongLongLine(*data);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "183272",
        "code": "void test_snippet()\n{\n    int * data;\n    int * dataArray[5];\n    \n    data = NULL;\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE476"
    },
    {
        "UID": "184074",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184086",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE479"
    },
    {
        "UID": "184115",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        signal(SIGINT, test_snippet_helper);\n        break;\n    }\n}",
        "predicted": "364,Signal Handler Race Condition",
        "CWE": "CWE479"
    },
    {
        "UID": "184101",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrue())\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184098",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184104",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n    else\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "364,Signal Handler Race Condition\n479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184080",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184095",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184092",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184083",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        signal(SIGINT, test_snippet_helper);\n    }\n}",
        "predicted": "479,Signal Handler Use of a Non-reentrant Function",
        "CWE": "CWE479"
    },
    {
        "UID": "184126",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184147",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184161",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184168",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    \n    if(test_snippet_helper == NULL)\n    {\n        printLine(\"Got a NULL\");\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184150",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrue())\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184135",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184138",
        "code": "void test_snippet()\n{\n    if(staticFive==5)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184129",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184153",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n    else\n    {\n        \n        if(test_snippet_helper() == NULL) \n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184155",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        if(test_snippet_helper == NULL)\n        {\n            printLine(\"Got a NULL\");\n        }\n    }\n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE480"
    },
    {
        "UID": "184655",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        int count = 0;\n        do\n        {\n            \n            if (count == COUNT_CHECK)\n            {\n                UNLINK(\"important_file.txt\");\n            }\n            count++;\n        }\n        while(1 == 1);   \n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "252,Unchecked Return Value\n400,Uncontrolled Resource Consumption\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE511"
    },
    {
        "UID": "184704",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n        srand((unsigned)time(NULL));\n        \n        if (rand() == NUM_CHECK)\n        {\n            UNLINK(\"important_file.txt\");\n        }\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE511"
    },
    {
        "UID": "184762",
        "code": "void test_snippet()\n{\n    {\n        SYSTEMTIME setTime, currentTime;\n        FILETIME setTimeAsFileTime, currentTimeAsFileTime;\n        \n        setTime.wYear         = 2008; \n        setTime.wMonth        = 1;    \n        setTime.wDayOfWeek    = 0;    \n        setTime.wDay          = 1;    \n        setTime.wHour         = 12;   \n        setTime.wMinute       = 0;    \n        setTime.wSecond       = 0;    \n        setTime.wMilliseconds = 0;    \n        GetSystemTime(&currentTime);\n        \n        SystemTimeToFileTime(&currentTime, &currentTimeAsFileTime);\n        SystemTimeToFileTime(&setTime, &setTimeAsFileTime);\n        \n        if (CompareFileTime(&currentTimeAsFileTime, &setTimeAsFileTime) == 1)\n        {\n            UNLINK(\"important_file.txt\");\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting",
        "CWE": "CWE511"
    },
    {
        "UID": "184711",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    srand((unsigned)time(NULL));\n    \n    if (rand() == NUM_CHECK)\n    {\n        UNLINK(\"important_file.txt\");\n    }\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\n427,Uncontrolled Search Path Element",
        "CWE": "CWE511"
    },
    {
        "UID": "184709",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        srand((unsigned)time(NULL));\n        \n        if (rand() == NUM_CHECK)\n        {\n            UNLINK(\"important_file.txt\");\n        }\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE511"
    },
    {
        "UID": "184760",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        time_t currentTime;\n        \n        time(&currentTime);\n        if (currentTime > TIME_CHECK)\n        {\n            UNLINK(\"important_file.txt\");\n        }\n    }\n}",
        "predicted": "15,External Control of System or Configuration Setting\n23,Relative Path Traversal\n36,Absolute Path Traversal\n78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE511"
    },
    {
        "UID": "184756",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            time_t currentTime;\n            \n            time(&currentTime);\n            if (currentTime > TIME_CHECK)\n            {\n                UNLINK(\"important_file.txt\");\n            }\n        }\n        break;\n    }\n}",
        "predicted": "272,Least Privilege Violation\n377,Insecure Temporary File",
        "CWE": "CWE511"
    },
    {
        "UID": "184794",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            SYSTEMTIME setTime, currentTime;\n            FILETIME setTimeAsFileTime, currentTimeAsFileTime;\n            \n            setTime.wYear         = 2008; \n            setTime.wMonth        = 1;    \n            setTime.wDayOfWeek    = 0;    \n            setTime.wDay          = 1;    \n            setTime.wHour         = 12;   \n            setTime.wMinute       = 0;    \n            setTime.wSecond       = 0;    \n            setTime.wMilliseconds = 0;    \n            GetSystemTime(&currentTime);\n            \n            SystemTimeToFileTime(&currentTime, &currentTimeAsFileTime);\n            SystemTimeToFileTime(&setTime, &setTimeAsFileTime);\n            \n            if (CompareFileTime(&currentTimeAsFileTime, &setTimeAsFileTime) == 1)\n            {\n                UNLINK(\"important_file.txt\");\n            }\n        }\n    }\n    else\n    {\n        {\n            SYSTEMTIME setTime, currentTime;\n            FILETIME setTimeAsFileTime, currentTimeAsFileTime;\n            \n            setTime.wYear         = 2008; \n            setTime.wMonth        = 1;    \n            setTime.wDayOfWeek    = 0;    \n            setTime.wDay          = 1;    \n            setTime.wHour         = 12;   \n            setTime.wMinute       = 0;    \n            setTime.wSecond       = 0;    \n            setTime.wMilliseconds = 0;    \n            GetSystemTime(&currentTime);\n            \n            SystemTimeToFileTime(&currentTime, &currentTimeAsFileTime);\n            SystemTimeToFileTime(&setTime, &setTimeAsFileTime);\n            \n            if (CompareFileTime(&currentTimeAsFileTime, &setTimeAsFileTime) == 1)\n            {\n                printLine(\"Happy New Year!\");\n            }\n        }\n    }\n}",
        "predicted": "511,Logic/Time Bomb",
        "CWE": "CWE511"
    },
    {
        "UID": "184713",
        "code": "void test_snippet()\n{\n    {\n        time_t currentTime;\n        \n        time(&currentTime);\n        if (currentTime > TIME_CHECK)\n        {\n            UNLINK(\"important_file.txt\");\n        }\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE511"
    },
    {
        "UID": "184727",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            time_t currentTime;\n            \n            time(&currentTime);\n            if (currentTime > TIME_CHECK)\n            {\n                UNLINK(\"important_file.txt\");\n            }\n        }\n    }\n}",
        "predicted": "272,Least Privilege Violation\n377,Insecure Temporary File",
        "CWE": "CWE511"
    },
    {
        "UID": "184851",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n        \n        printLine(getenv(\"PATH\"));\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184845",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184858",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    \n    printLine(getenv(\"PATH\"));\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184828",
        "code": "void test_snippet()\n{\n    if(staticFive==5)\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184843",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n    else\n    {\n        \n        printLine(\"Not in path\");\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184813",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184822",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184837",
        "code": "void test_snippet()\n{\n    if(globalTrue)\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184840",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrue())\n    {\n        \n        printLine(getenv(\"PATH\"));\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "184854",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        printLine(getenv(\"PATH\"));\n        break;\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE526"
    },
    {
        "UID": "185223",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185226",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185088",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n    else\n    {\n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185103",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    \n    \n    printLine(\"Hello\");\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185217",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185099",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        \n        \n        printLine(\"Hello\");\n        break;\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185067",
        "code": "void test_snippet()\n{\n    if(staticTrue)\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185056",
        "code": "void test_snippet()\n{\n    \n    \n    printLine(\"Hello\");\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185090",
        "code": "void test_snippet()\n{\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "185064",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        \n        \n        printLine(\"Hello\");\n    }\n}",
        "predicted": "546,Suspicious Comment",
        "CWE": "CWE546"
    },
    {
        "UID": "186899",
        "code": "void test_snippet()\n{\n    wchar_t data;\n    while(1)\n    {\n        \n        data = L'W';\n        break;\n    }\n    while(1)\n    {\n        \n        data = L'Z';\n        printf(\"%02lx\\n\", data);\n        break;\n    }\n}",
        "predicted": "134,Use of Externally-Controlled Format String\n457,Use of Uninitialized Variable\n665,Improper Initialization",
        "CWE": "CWE563"
    },
    {
        "UID": "186774",
        "code": "void test_snippet()\n{\n    twoIntsStruct data;\n    switch(6)\n    {\n    case 6:\n        \n        data.intOne = 0;\n        data.intTwo = 0;\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        \n        data.intOne = 1;\n        data.intTwo = 1;\n        printStructLine(&data);\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "186342",
        "code": "void CWE563_Unused_Variable__unused_value_char_73bSink(list<char> test_snippet\n{\n    \n    char data = dataList.back();\n    \n    data = 'Z';\n    printHexCharLine(data);\n}",
        "predicted": "563,Assignment to Variable without Use",
        "CWE": "CWE563"
    },
    {
        "UID": "186436",
        "code": "void test_snippet()\n{\n    int64_t data;\n    \n    data = 5LL;\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "186568",
        "code": "void test_snippet()\n{\n    int data;\n    test_snippetSource(data);\n    \n    data = 10;\n    printIntLine(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "185523",
        "code": "void test_snippet()\n{\n    int data;\n    test_snippetSource(data);\n    \n    \n    ; \n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "186471",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = 5;\n    \n    data = 10;\n    printIntLine(data);\n}",
        "predicted": "563,Assignment to Variable without Use",
        "CWE": "CWE563"
    },
    {
        "UID": "186047",
        "code": "static void CWE563_Unused_Variable__unused_uninit_variable_long_21Sink(long test_snippet\n{\n    if(CWE563_Unused_Variable__unused_uninit_variable_long_21Static)\n    {\n        \n        \n        ; \n    }\n}",
        "predicted": "563,Assignment to Variable without Use",
        "CWE": "CWE563"
    },
    {
        "UID": "185715",
        "code": "void test_snippet()\n{\n    wchar_t data;\n    \n    data = L'W';\n    if(GLOBAL_CONST_TRUE)\n    {\n        \n        \n        ; \n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "185684",
        "code": "void test_snippet()\n{\n    twoIntsStruct data;\n    list<twoIntsStruct> dataList;\n    \n    data.intOne = 0;\n    data.intTwo = 0;\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE563"
    },
    {
        "UID": "186996",
        "code": "void test_snippet()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186959",
        "code": "void test_snippet()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186998",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        \n        char *charPointer = (char*)0x400000;\n        printHexCharLine(*charPointer);\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186983",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n    else\n    {\n        {\n            \n            char charStack = 'a';\n            char *charPointer = &charStack;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer\n457,Use of Uninitialized Variable",
        "CWE": "CWE587"
    },
    {
        "UID": "186951",
        "code": "void test_snippet()\n{\n    {\n        \n        char *charPointer = (char*)0x400000;\n        printHexCharLine(*charPointer);\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186980",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrue())\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186994",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n        break;\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186971",
        "code": "void test_snippet()\n{\n    if(staticReturnsTrue())\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186953",
        "code": "void test_snippet()\n{\n    if(1)\n    {\n        {\n            \n            char *charPointer = (char*)0x400000;\n            printHexCharLine(*charPointer);\n        }\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "186991",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        \n        char *charPointer = (char*)0x400000;\n        printHexCharLine(*charPointer);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "587,Assignment of a Fixed Address to a Pointer",
        "CWE": "CWE587"
    },
    {
        "UID": "187065",
        "code": "static void test_snippet()\n{\n    void * data = CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_45Data;\n    \n    printIntLine((reinterpret_cast<TwoIntsClass *>(data))->intTwo);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187191",
        "code": "void test_snippet()\n{\n    void * data;\n    twoIntsStruct dataGoodBuffer;\n    int dataBadBuffer = 100;\n    dataGoodBuffer.intOne = 0;\n    dataGoodBuffer.intTwo = 0;\n    \n    data = &dataBadBuffer;\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE588"
    },
    {
        "UID": "187252",
        "code": "void test_snippet()\n{\n    void * data = CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_68bData;\n    \n    printStructLine((twoIntsStruct *)data);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187091",
        "code": "void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_54cSink_c(void * test_snippet\n{\n    CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_54cSink_d(test_snippet;\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187135",
        "code": "void test_snippet()\n{\n    void * data;\n    twoIntsStruct dataGoodBuffer;\n    int dataBadBuffer = 100;\n    dataGoodBuffer.intOne = 0;\n    dataGoodBuffer.intTwo = 0;\n    if(1)\n    {\n        \n        data = &dataBadBuffer;\n    }\n    \n    printStructLine((twoIntsStruct *)data);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187062",
        "code": "void test_snippet()\n{\n    void * data;\n    \n    void (*funcPtr) (void *) = test_snippetSink;\n    TwoIntsClass dataGoodBuffer;\n    int dataBadBuffer = 100;\n    dataGoodBuffer.intOne = 0;\n    dataGoodBuffer.intTwo = 0;\n    \n    data = &dataBadBuffer;\n    \n    funcPtr(data);\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE588"
    },
    {
        "UID": "187127",
        "code": "void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_73bSink(list<void *> test_snippet\n{\n    \n    void * data = dataList.back();\n    \n    printIntLine((reinterpret_cast<TwoIntsClass *>(data))->intTwo);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187246",
        "code": "void test_snippet()\n{\n    void * data;\n    CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__struct_67_structType myStruct;\n    twoIntsStruct dataGoodBuffer;\n    int dataBadBuffer = 100;\n    dataGoodBuffer.intOne = 0;\n    dataGoodBuffer.intTwo = 0;\n    \n    data = &dataBadBuffer;\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187089",
        "code": "void CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_54bSink_b(void * test_snippet\n{\n    CWE588_Attempt_to_Access_Child_of_Non_Structure_Pointer__class_54bSink_c(test_snippet;\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "187176",
        "code": "void test_snippet()\n{\n    void * data;\n    twoIntsStruct dataGoodBuffer;\n    int dataBadBuffer = 100;\n    dataGoodBuffer.intOne = 0;\n    dataGoodBuffer.intTwo = 0;\n    while(1)\n    {\n        \n        data = &dataBadBuffer;\n        break;\n    }\n    \n    printStructLine((twoIntsStruct *)data);\n}",
        "predicted": "588,Attempt to Access Child of a Non-structure Pointer",
        "CWE": "CWE588"
    },
    {
        "UID": "191314",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    data = NULL; \n    {\n        \n        int64_t dataBuffer;\n        dataBuffer = 5LL;\n        data = &dataBuffer;\n    }\n    test_snippetSink(data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free\n416,Use After Free",
        "CWE": "CWE590"
    },
    {
        "UID": "190112",
        "code": "void test_snippet()\n{\n    char * data;\n    char * &dataRef = data;\n    data = NULL; \n    {\n        \n        char * dataBuffer = (char *)ALLOCA(sizeof(char));\n        *dataBuffer = 'A';\n        data = dataBuffer;\n    }\n    {\n        char * data = dataRef;\n        printHexCharLine(*data);\n        \n        delete data;\n    }\n}",
        "predicted": "415,Double Free\n401,Missing Release of Memory after Effective Lifetime\n762,Mismatched Memory Management Routines",
        "CWE": "CWE590"
    },
    {
        "UID": "187607",
        "code": "void CWE590_Free_Memory_Not_on_Heap__delete_array_char_static_52bSink_b(char * test_snippet\n{\n    CWE590_Free_Memory_Not_on_Heap__delete_array_char_static_52bSink_c(test_snippet;\n}",
        "predicted": "590,Free of Memory not on the Heap",
        "CWE": "CWE590"
    },
    {
        "UID": "192711",
        "code": "void test_snippet()\n{\n    long * data;\n    list<long *> dataList;\n    data = NULL; \n    {\n        \n        static long dataBuffer;\n        dataBuffer = 5L;\n        data = &dataBuffer;\n    }\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE590"
    },
    {
        "UID": "188119",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    unionType myUnion;\n    data = NULL; \n    {\n        \n        int64_t * dataBuffer = (int64_t *)ALLOCA(100*sizeof(int64_t));\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5LL;\n            }\n        }\n        data = dataBuffer;\n    }\n    myUnion.unionFirst = data;\n    {\n        int64_t * data = myUnion.unionSecond;\n        printLongLongLine(data[0]);\n        \n        delete [] data;\n    }\n}",
        "predicted": "415,Double Free\n762,Mismatched Memory Management Routines",
        "CWE": "CWE590"
    },
    {
        "UID": "190055",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    map<int, wchar_t *> dataMap;\n    data = NULL; \n    {\n        \n        static wchar_t dataBuffer[100];\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE590"
    },
    {
        "UID": "190782",
        "code": "void test_snippet()\n{\n    TwoIntsClass * data;\n    data = NULL; \n    {\n        \n        TwoIntsClass dataBuffer;\n        dataBuffer.intOne = 1;\n        dataBuffer.intTwo = 1;\n        data = &dataBuffer;\n    }\n    test_snippetSink(data);\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE590"
    },
    {
        "UID": "191303",
        "code": "void test_snippet()\n{\n    int64_t * data;\n    data = NULL; \n    goto source;\nsource:\n    {\n        \n        int64_t dataBuffer;\n        dataBuffer = 5LL;\n        data = &dataBuffer;\n    }\n    printLongLongLine(*data);\n    \n    delete data;\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE590"
    },
    {
        "UID": "190047",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    vector<wchar_t *> dataVector;\n    data = NULL; \n    {\n        \n        static wchar_t dataBuffer[100];\n        wmemset(dataBuffer, L'A', 100-1); \n        dataBuffer[100-1] = L'\\0'; \n        data = dataBuffer;\n    }\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE590"
    },
    {
        "UID": "189035",
        "code": "void test_snippet()\n{\n    long * data;\n    data = NULL; \n    switch(6)\n    {\n    case 6:\n    {\n        \n        long dataBuffer[100];\n        {\n            size_t i;\n            for (i = 0; i < 100; i++)\n            {\n                dataBuffer[i] = 5L;\n            }\n        }\n        data = dataBuffer;\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    printLongLine(data[0]);\n    \n    delete [] data;\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE590"
    },
    {
        "UID": "196334",
        "code": "void test_snippet()\n{\n    char * password;\n    map<int, char *> passwordMap;\n    \n    password = \"\";\n    password = (char *)malloc(100*sizeof(char));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    strcpy(password, \"Password1234!\");\n    \n    passwordMap[0] = password;\n    passwordMap[1] = password;\n    passwordMap[2] = password;\n    test_snippetSink(passwordMap);\n}",
        "predicted": "256,Plaintext Storage of a Password\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE591"
    },
    {
        "UID": "196330",
        "code": "void test_snippet()\n{\n    char * password;\n    list<char *> passwordList;\n    \n    password = \"\";\n    password = (char *)malloc(100*sizeof(char));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    strcpy(password, \"Password1234!\");\n    \n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    test_snippetSink(passwordList);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE591"
    },
    {
        "UID": "196326",
        "code": "void test_snippet()\n{\n    char * password;\n    vector<char *> passwordVector;\n    \n    password = \"\";\n    password = (char *)malloc(100*sizeof(char));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    strcpy(password, \"Password1234!\");\n    \n    passwordVector.insert(passwordVector.end(), 1, password);\n    passwordVector.insert(passwordVector.end(), 1, password);\n    passwordVector.insert(passwordVector.end(), 1, password);\n    test_snippetSink(passwordVector);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE591"
    },
    {
        "UID": "196224",
        "code": "void test_snippet()\n{\n    char * password;\n    \n    password = \"\";\n    goto source;\nsource:\n    password = (char *)malloc(100*sizeof(char));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    strcpy(password, \"Password1234!\");\n    {\n        HANDLE pHandle;\n        char * username = \"User\";\n        char * domain = \"Domain\";\n        \n        if (LogonUserA(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n        \n        free(password);\n    }\n}",
        "predicted": "259,Use of Hard-coded Password\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE591"
    },
    {
        "UID": "196479",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    CWE591_Sensitive_Data_Storage_in_Improperly_Locked_Memory__w32_wchar_t_67_structType myStruct;\n    \n    password = L\"\";\n    password = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    wcscpy(password, L\"Password1234!\");\n    myStruct.structFirst = password;\n    test_snippetSink(myStruct);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n591,Sensitive Data Storage in Improperly Locked Memory",
        "CWE": "CWE591"
    },
    {
        "UID": "196318",
        "code": "void test_snippet()\n{\n    char * password;\n    CWE591_Sensitive_Data_Storage_in_Improperly_Locked_Memory__w32_char_67_structType myStruct;\n    \n    password = \"\";\n    password = (char *)malloc(100*sizeof(char));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    strcpy(password, \"Password1234!\");\n    myStruct.structFirst = password;\n    test_snippetSink(myStruct);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n591,Sensitive Data Storage in Improperly Locked Memory",
        "CWE": "CWE591"
    },
    {
        "UID": "196491",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    list<wchar_t *> passwordList;\n    \n    password = L\"\";\n    password = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    wcscpy(password, L\"Password1234!\");\n    \n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    passwordList.push_back(password);\n    test_snippetSink(passwordList);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE591"
    },
    {
        "UID": "196388",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    \n    password = L\"\";\n    test_snippetStatic = 1; \n    password = test_snippetSource(password);\n    {\n        HANDLE pHandle;\n        wchar_t * username = L\"User\";\n        wchar_t * domain = L\"Domain\";\n        \n        if (LogonUserW(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n        \n        free(password);\n    }\n}",
        "predicted": "415,Double Free\n401,Missing Release of Memory after Effective Lifetime\n259,Use of Hard-coded Password",
        "CWE": "CWE591"
    },
    {
        "UID": "196352",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    \n    password = L\"\";\n    if(STATIC_CONST_FIVE==5)\n    {\n        password = (wchar_t *)malloc(100*sizeof(wchar_t));\n        if (password == NULL)\n        {\n            printLine(\"Memory could not be allocated\");\n            exit(1);\n        }\n        \n        \n        wcscpy(password, L\"Password1234!\");\n    }\n    {\n        HANDLE pHandle;\n        wchar_t * username = L\"User\";\n        wchar_t * domain = L\"Domain\";\n        \n        if (LogonUserW(\n                    username,\n                    domain,\n                    password,\n                    LOGON32_LOGON_NETWORK,\n                    LOGON32_PROVIDER_DEFAULT,\n                    &pHandle) != 0)\n        {\n            printLine(\"User logged in successfully.\");\n            CloseHandle(pHandle);\n        }\n        else\n        {\n            printLine(\"Unable to login.\");\n        }\n        \n        free(password);\n    }\n}",
        "predicted": "256,Plaintext Storage of a Password\n401,Missing Release of Memory after Effective Lifetime\n259,Use of Hard-coded Password",
        "CWE": "CWE591"
    },
    {
        "UID": "196475",
        "code": "void test_snippet()\n{\n    wchar_t * password;\n    wchar_t * passwordArray[5];\n    \n    password = L\"\";\n    password = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (password == NULL)\n    {\n        printLine(\"Memory could not be allocated\");\n        exit(1);\n    }\n    \n    \n    wcscpy(password, L\"Password1234!\");\n    \n    passwordArray[2] = password;\n    test_snippetSink(passwordArray);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free",
        "CWE": "CWE591"
    },
    {
        "UID": "197040",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    {\n        int i, n, intVariable;\n        if (sscanf(data, \"%d\", &n) == 1)\n        {\n            \n            intVariable = 0;\n            for (i = 0; i < n; i++)\n            {\n                \n                intVariable++; \n            }\n            printIntLine(intVariable);\n        }\n    }\n}",
        "predicted": "526,Cleartext Storage of Sensitive Information in an Environment Variable\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "197093",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            \n            size_t dataLen = strlen(data);\n            char * environment = GETENV(ENV_VARIABLE);\n            \n            if (environment != NULL)\n            {\n                \n                strncat(data+dataLen, environment, 100-dataLen-1);\n            }\n        }\n    }\n    else\n    {\n        \n        strcpy(data, \"15\");\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            int i, n, intVariable;\n            if (sscanf(data, \"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n    }\n    else\n    {\n        {\n            int i, n, intVariable;\n            if (sscanf(data, \"%d\", &n) == 1)\n            {\n                \n                if (n < MAX_LOOP)\n                {\n                    intVariable = 0;\n                    for (i = 0; i < n; i++)\n                    {\n                        \n                        intVariable++; \n                    }\n                    printIntLine(intVariable);\n                }\n            }\n        }\n    }\n}",
        "predicted": "252,Unchecked Return Value\n606,Unchecked Input for Loop Condition\n20,Improper Input Validation",
        "CWE": "CWE606"
    },
    {
        "UID": "196865",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    while(1)\n    {\n        {\n            \n            size_t dataLen = strlen(data);\n            \n            if (100-dataLen > 1)\n            {\n                \n                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)\n                {\n                    \n                    dataLen = strlen(data);\n                    if (dataLen > 0 && data[dataLen-1] == '\\n')\n                    {\n                        data[dataLen-1] = '\\0';\n                    }\n                }\n                else\n                {\n                    printLine(\"fgets() failed\");\n                    \n                    data[dataLen] = '\\0';\n                }\n            }\n        }\n        break;\n    }\n    while(1)\n    {\n        {\n            int i, n, intVariable;\n            if (sscanf(data, \"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n        break;\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition\n190,Integer Overflow or Wraparound\n252,Unchecked Return Value",
        "CWE": "CWE606"
    },
    {
        "UID": "198336",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n        \n        size_t dataLen = wcslen(data);\n        wchar_t * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            wcsncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        int i, n, intVariable;\n        if (swscanf(data, L\"%d\", &n) == 1)\n        {\n            \n            intVariable = 0;\n            for (i = 0; i < n; i++)\n            {\n                \n                intVariable++; \n            }\n            printIntLine(intVariable);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "252,Unchecked Return Value\n606,Unchecked Input for Loop Condition\n20,Improper Input Validation",
        "CWE": "CWE606"
    },
    {
        "UID": "198582",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n        \n        size_t dataLen = wcslen(data);\n        FILE * pFile;\n        \n        if (100-dataLen > 1)\n        {\n            pFile = fopen(FILENAME, \"r\");\n            if (pFile != NULL)\n            {\n                \n                if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)\n                {\n                    printLine(\"fgetws() failed\");\n                    \n                    data[dataLen] = L'\\0';\n                }\n                fclose(pFile);\n            }\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n    {\n        int i, n, intVariable;\n        if (swscanf(data, L\"%d\", &n) == 1)\n        {\n            \n            intVariable = 0;\n            for (i = 0; i < n; i++)\n            {\n                \n                intVariable++; \n            }\n            printIntLine(intVariable);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "252,Unchecked Return Value\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "196779",
        "code": "void CWE606_Unchecked_Loop_Condition__char_connect_socket_72bSink(vector<char *> test_snippet\n{\n    \n    char * data = dataVector[2];\n    {\n        int i, n, intVariable;\n        if (sscanf(data, \"%d\", &n) == 1)\n        {\n            \n            intVariable = 0;\n            for (i = 0; i < n; i++)\n            {\n                \n                intVariable++; \n            }\n            printIntLine(intVariable);\n        }\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "198539",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            \n            size_t dataLen = wcslen(data);\n            FILE * pFile;\n            \n            if (100-dataLen > 1)\n            {\n                pFile = fopen(FILENAME, \"r\");\n                if (pFile != NULL)\n                {\n                    \n                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)\n                    {\n                        printLine(\"fgetws() failed\");\n                        \n                        data[dataLen] = L'\\0';\n                    }\n                    fclose(pFile);\n                }\n            }\n        }\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            int i, n, intVariable;\n            if (swscanf(data, L\"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "198323",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = L\"\";\n    data = dataBuffer;\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            \n            size_t dataLen = wcslen(data);\n            wchar_t * environment = GETENV(ENV_VARIABLE);\n            \n            if (environment != NULL)\n            {\n                \n                wcsncat(data+dataLen, environment, 100-dataLen-1);\n            }\n        }\n    }\n    else\n    {\n        \n        wcscpy(data, L\"15\");\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            int i, n, intVariable;\n            if (swscanf(data, L\"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n    }\n    else\n    {\n        {\n            int i, n, intVariable;\n            if (swscanf(data, L\"%d\", &n) == 1)\n            {\n                \n                if (n < MAX_LOOP)\n                {\n                    intVariable = 0;\n                    for (i = 0; i < n; i++)\n                    {\n                        \n                        intVariable++; \n                    }\n                    printIntLine(intVariable);\n                }\n            }\n        }\n    }\n}",
        "predicted": "252,Unchecked Return Value\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "197637",
        "code": "void test_snippet()\n{\n    char * data;\n    test_snippet_unionType myUnion;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        char *replace;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        size_t dataLen = strlen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(char)] = '\\0';\n            \n            replace = strchr(data, '\\r');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n            replace = strchr(data, '\\n');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    myUnion.unionFirst = data;\n    {\n        char * data = myUnion.unionSecond;\n        {\n            int i, n, intVariable;\n            if (sscanf(data, \"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "197309",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            \n            size_t dataLen = strlen(data);\n            FILE * pFile;\n            \n            if (100-dataLen > 1)\n            {\n                pFile = fopen(FILENAME, \"r\");\n                if (pFile != NULL)\n                {\n                    \n                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)\n                    {\n                        printLine(\"fgets() failed\");\n                        \n                        data[dataLen] = '\\0';\n                    }\n                    fclose(pFile);\n                }\n            }\n        }\n    }\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            int i, n, intVariable;\n            if (sscanf(data, \"%d\", &n) == 1)\n            {\n                \n                intVariable = 0;\n                for (i = 0; i < n; i++)\n                {\n                    \n                    intVariable++; \n                }\n                printIntLine(intVariable);\n            }\n        }\n    }\n}",
        "predicted": "606,Unchecked Input for Loop Condition",
        "CWE": "CWE606"
    },
    {
        "UID": "199465",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = ASSERT_VALUE-1;\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199536",
        "code": "void test_snippet()\n{\n    int data;\n    map<int, int> dataMap;\n    \n    data = -1;\n    \n    data = ASSERT_VALUE-1;\n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199987",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(&data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE617"
    },
    {
        "UID": "199273",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    test_snippetGlobal = 1; \n    data = test_snippetSource(data);\n    \n    assert(data > ASSERT_VALUE);\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199528",
        "code": "void test_snippet()\n{\n    int data;\n    vector<int> dataVector;\n    \n    data = -1;\n    \n    data = ASSERT_VALUE-1;\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199991",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(&data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE617"
    },
    {
        "UID": "199948",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE617"
    },
    {
        "UID": "199296",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    test_snippetSource(data);\n    \n    assert(data > ASSERT_VALUE);\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199681",
        "code": "void test_snippet()\n{\n    int data;\n    CWE617_Reachable_Assertion__fscanf_67_structType myStruct;\n    \n    data = -1;\n    \n    fscanf(stdin, \"%d\", &data);\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "252,Unchecked Return Value\n606,Unchecked Input for Loop Condition\n617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "199687",
        "code": "void test_snippet()\n{\n    int data = CWE617_Reachable_Assertion__fscanf_68bData;\n    \n    assert(data > ASSERT_VALUE);\n}",
        "predicted": "617,Reachable Assertion",
        "CWE": "CWE617"
    },
    {
        "UID": "200246",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    \n    ; \n    test_snippetSink(&data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE665"
    },
    {
        "UID": "200592",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    vector<wchar_t *> dataVector;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    ; \n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE665"
    },
    {
        "UID": "200327",
        "code": "void test_snippet()\n{\n    int i;\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    for(i = 0; i < 1; i++)\n    {\n        \n        ; \n    }\n    {\n        size_t sourceLen;\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        sourceLen = strlen(source);\n        \n        strncat(data, source, sourceLen);\n        printLine(data);\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE665"
    },
    {
        "UID": "200711",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100];\n    data = dataBuffer;\n    \n    ; \n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE665"
    },
    {
        "UID": "200164",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    while(1)\n    {\n        \n        ; \n        break;\n    }\n    {\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        \n        strcat(data, source);\n        printLine(data);\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE665"
    },
    {
        "UID": "200296",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        ; \n    }\n    {\n        size_t sourceLen;\n        char source[100];\n        memset(source, 'C', 100-1); \n        source[100-1] = '\\0'; \n        sourceLen = strlen(source);\n        \n        strncat(data, source, sourceLen);\n        printLine(data);\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE665"
    },
    {
        "UID": "200331",
        "code": "static char * CWE665_Improper_Initialization__char_ncat_21Source(char * test_snippet\n{\n    if(CWE665_Improper_Initialization__char_ncat_21Static)\n    {\n        \n        ; \n    }\n    return data;\n}",
        "predicted": "665,Improper Initialization",
        "CWE": "CWE665"
    },
    {
        "UID": "200274",
        "code": "void test_snippet()\n{\n    char * data;\n    list<char *> dataList;\n    char dataBuffer[100];\n    data = dataBuffer;\n    \n    ; \n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE665"
    },
    {
        "UID": "200345",
        "code": "void test_snippet()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    char dataBuffer[100];\n    data = dataBuffer;\n    {\n        char * data = *dataPtr1;\n        \n        ; \n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        {\n            size_t sourceLen;\n            char source[100];\n            memset(source, 'C', 100-1); \n            source[100-1] = '\\0'; \n            sourceLen = strlen(source);\n            \n            strncat(data, source, sourceLen);\n            printLine(data);\n        }\n    }\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE665"
    },
    {
        "UID": "200759",
        "code": "void CWE665_Improper_Initialization__wchar_t_ncat_73bSink(list<wchar_t *> test_snippet\n{\n    \n    wchar_t * data = dataList.back();\n    {\n        size_t sourceLen;\n        wchar_t source[100];\n        wmemset(source, L'C', 100-1); \n        source[100-1] = L'\\0'; \n        sourceLen = wcslen(source);\n        \n        wcsncat(data, source, sourceLen);\n        printWLine(data);\n    }\n}",
        "predicted": "122,Heap-based Buffer Overflow\n665,Improper Initialization",
        "CWE": "CWE665"
    },
    {
        "UID": "201248",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    \n    data.push_back(100);\n    data.push_back(0);\n    test_snippetSink(&data);\n}",
        "predicted": "The code snippet provided does not contain enough context to identify a specific vulnerability. Please provide a more complete code snippet.",
        "CWE": "CWE672"
    },
    {
        "UID": "201290",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    list<list<int> > dataList;\n    \n    data.push_back(100);\n    data.push_back(0);\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "The provided code snippet does not seem to contain any vulnerabilities from the provided list. It simply creates a list of integers, adds two integers to it, and then adds this list three times to a list of lists. Finally, it calls a function with this list of lists as an argument. Without the context of what the function \"test_snippetSink\" does, it's impossible to identify any specific vulnerabilities.",
        "CWE": "CWE672"
    },
    {
        "UID": "201230",
        "code": "void CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54dSink_d(list<int>  test_snippet\n{\n    CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54dSink_e(test_snippet;\n}",
        "predicted": "672,Operation on a Resource after Expiration or Release",
        "CWE": "CWE672"
    },
    {
        "UID": "201224",
        "code": "void CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54bSink_b(list<int>  test_snippet\n{\n    CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54bSink_c(test_snippet;\n}",
        "predicted": "672,Operation on a Resource after Expiration or Release",
        "CWE": "CWE672"
    },
    {
        "UID": "201278",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    \n    data.push_back(100);\n    data.push_back(0);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "The provided code snippet does not seem to contain any obvious vulnerabilities based on the provided category list. It simply creates a list of integers, adds two values to it, and then assigns it to a variable. Without additional context or code, it's not possible to identify a specific vulnerability.",
        "CWE": "CWE672"
    },
    {
        "UID": "201112",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        data.push_back(100);\n        data.push_back(0);\n    }\n    else\n    {\n        \n        data.push_back(100);\n        data.push_back(200);\n    }\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            list<int> ::iterator i;\n            cout << \"The list contains: \";\n            for( i = data.begin(); i != data.end(); i++)\n            {\n                if (!*i)\n                {\n                    data.clear();\n                }\n                \n                cout << \" \" << *i;\n            }\n            cout << endl;\n        }\n    }\n    else\n    {\n        {\n            list<int> ::iterator i;\n            cout << \"The list contains: \";\n            for( i = data.begin(); i != data.end(); i++)\n            {\n                \n                cout << \" \" << *i;\n            }\n            cout << endl;\n        }\n    }\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE672"
    },
    {
        "UID": "201284",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    vector<list<int> > dataVector;\n    \n    data.push_back(100);\n    data.push_back(0);\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "The provided code snippet does not seem to contain any vulnerabilities. It simply creates a list of integers, adds two integers to the list, and then adds the list to a vector three times. There is no improper handling of data, no unchecked return values, no hard-coded sensitive information, and no improper memory management. Therefore, it's not possible to categorize any flaw in this code.",
        "CWE": "CWE672"
    },
    {
        "UID": "201189",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    \n    data.push_back(100);\n    data.push_back(0);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "The provided code snippet does not seem to contain any obvious vulnerabilities based on the provided category list. It simply creates a list of integers, adds two values to it, and then assigns it to a variable and calls a function. Without additional context or code, it's impossible to identify a specific vulnerability.",
        "CWE": "CWE672"
    },
    {
        "UID": "201272",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    structType myStruct;\n    \n    data.push_back(100);\n    data.push_back(0);\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE672"
    },
    {
        "UID": "201183",
        "code": "void test_snippet()\n{\n    list<int>  data;\n    \n    void (*funcPtr) (list<int> ) = test_snippetSink;\n    \n    data.push_back(100);\n    data.push_back(0);\n    \n    funcPtr(data);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE672"
    },
    {
        "UID": "201514",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    void (*funcPtr) (FILE *) = test_snippetSink;\n    data = NULL; \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    \n    fclose(data);\n    \n    funcPtr(data);\n}",
        "predicted": "415,Double Free\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE675"
    },
    {
        "UID": "201778",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL; \n    data = freopen(\"BadSource_freopen.txt\",\"w+\",stdin);\n    \n    fclose(data);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE675"
    },
    {
        "UID": "201648",
        "code": "void CWE675_Duplicate_Operations_on_Resource__freopen_22bSink(FILE * test_snippet\n{\n    if(CWE675_Duplicate_Operations_on_Resource__freopen_22bGlobal)\n    {\n        \n        fclose(test_snippet;\n    }\n}",
        "predicted": "675,Multiple Operations on Resource in Single-Operation Context",
        "CWE": "CWE675"
    },
    {
        "UID": "201934",
        "code": "static void test_snippet()\n{\n    int data = CWE675_Duplicate_Operations_on_Resource__open_45Data;\n    \n    CLOSE(data);\n}",
        "predicted": "675,Multiple Operations on Resource in Single-Operation Context",
        "CWE": "CWE675"
    },
    {
        "UID": "202150",
        "code": "void test_snippet()\n{\n    HANDLE data;\n    HANDLE &dataRef = data;\n    data = INVALID_HANDLE_VALUE; \n    data = CreateFile(\"BadSource_w32CreateFile.txt\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    \n    CloseHandle(data);\n    {\n        HANDLE data = dataRef;\n        \n        CloseHandle(data);\n    }\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE675"
    },
    {
        "UID": "201810",
        "code": "void test_snippet()\n{\n    int data;\n    data = -1; \n    if(5==5)\n    {\n        data = OPEN(\"BadSource_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        \n        CLOSE(data);\n    }\n    if(5==5)\n    {\n        \n        CLOSE(data);\n    }\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE675"
    },
    {
        "UID": "201442",
        "code": "static void test_snippet()\n{\n    FILE * data = CWE675_Duplicate_Operations_on_Resource__fopen_45Data;\n    \n    fclose(data);\n}",
        "predicted": "675,Multiple Operations on Resource in Single-Operation Context",
        "CWE": "CWE675"
    },
    {
        "UID": "201799",
        "code": "void CWE675_Duplicate_Operations_on_Resource__freopen_74bSink(map<int, FILE *> test_snippet\n{\n    \n    FILE * data = dataMap[2];\n    \n    fclose(data);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE675"
    },
    {
        "UID": "201997",
        "code": "void CWE675_Duplicate_Operations_on_Resource__open_63bSink(int * test_snippet\n{\n    int data = *dataPtr;\n    \n    CLOSE(data);\n}",
        "predicted": "675,Multiple Operations on Resource in Single-Operation Context",
        "CWE": "CWE675"
    },
    {
        "UID": "201815",
        "code": "void test_snippet()\n{\n    int data;\n    data = -1; \n    if(STATIC_CONST_TRUE)\n    {\n        data = OPEN(\"BadSource_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        \n        CLOSE(data);\n    }\n    if(STATIC_CONST_TRUE)\n    {\n        \n        CLOSE(data);\n    }\n}",
        "predicted": "415,Double Free\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE675"
    },
    {
        "UID": "202822",
        "code": "void test_snippet()\n{\n    int data;\n    map<int, int> dataMap;\n    \n    data = -1;\n    \n    data = INT_MAX / 2 + 2; \n    \n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "190,Integer Overflow or Wraparound\n680,Integer Overflow to Buffer Overflow\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE680"
    },
    {
        "UID": "202498",
        "code": "void CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_connect_socket_73bSink(list<int> test_snippet\n{\n    \n    int data = dataList.back();\n    {\n        size_t i;\n        int *intPointer;\n        \n        intPointer = (int*)malloc(data * sizeof(int));\n        if (intPointer == NULL) {exit(-1);}\n        for (i = 0; i < (size_t)data; i++)\n        {\n            intPointer[i] = 0; \n        }\n        printIntLine(intPointer[0]);\n        free(intPointer);\n    }\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE680"
    },
    {
        "UID": "204056",
        "code": "void CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_53cSink_c(int test_snippet\n{\n    CWE680_Integer_Overflow_to_Buffer_Overflow__new_listen_socket_53cSink_d(test_snippet;\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE680"
    },
    {
        "UID": "202723",
        "code": "int CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_22bSource(int test_snippet\n{\n    if(CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_22bGlobal)\n    {\n        \n        data = INT_MAX / 2 + 2; \n        \n    }\n    return data;\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE680"
    },
    {
        "UID": "203237",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE680"
    },
    {
        "UID": "204163",
        "code": "static int CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_21Source(int test_snippet\n{\n    if(CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_21Static)\n    {\n        \n        data = RAND32();\n    }\n    return data;\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow",
        "CWE": "CWE680"
    },
    {
        "UID": "203255",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE680"
    },
    {
        "UID": "202802",
        "code": "void test_snippet()\n{\n    int data;\n    int dataArray[5];\n    \n    data = -1;\n    \n    data = INT_MAX / 2 + 2; \n    \n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "190,Integer Overflow or Wraparound\n680,Integer Overflow to Buffer Overflow\n122,Heap-based Buffer Overflow",
        "CWE": "CWE680"
    },
    {
        "UID": "202670",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    if(5==5)\n    {\n        \n        data = INT_MAX / 2 + 2; \n        \n    }\n    {\n        size_t i;\n        int *intPointer;\n        \n        intPointer = (int*)malloc(data * sizeof(int));\n        if (intPointer == NULL) {exit(-1);}\n        for (i = 0; i < (size_t)data; i++)\n        {\n            intPointer[i] = 0; \n        }\n        printIntLine(intPointer[0]);\n        free(intPointer);\n    }\n}",
        "predicted": "680,Integer Overflow to Buffer Overflow\n400,Uncontrolled Resource Consumption\n401,Missing Release of Memory after Effective Lifetime\n122,Heap-based Buffer Overflow",
        "CWE": "CWE680"
    },
    {
        "UID": "204239",
        "code": "void test_snippet()\n{\n    int data;\n    \n    data = -1;\n    \n    data = RAND32();\n    test_snippetSink(&data);\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE680"
    },
    {
        "UID": "207517",
        "code": "static void test_snippet()\n{\n    wchar_t * data = CWE690_NULL_Deref_From_Return__wchar_t_realloc_45Data;\n    \n    wcscpy(data, L\"Initialize\");\n    printWLine(data);\n    free(data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n415,Double Free\n416,Use After Free\n690,Unchecked Return Value to NULL Pointer Dereference",
        "CWE": "CWE690"
    },
    {
        "UID": "206694",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    test_snippet_unionType myUnion;\n    data = NULL; \n    \n    data = (twoIntsStruct *)malloc(1*sizeof(twoIntsStruct));\n    myUnion.unionFirst = data;\n    {\n        twoIntsStruct * data = myUnion.unionSecond;\n        \n        data[0].intOne = 1;\n        data[0].intTwo = 1;\n        printStructLine(&data[0]);\n        free(data);\n    }\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE690"
    },
    {
        "UID": "206858",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    \n    data = (twoIntsStruct *)realloc(data, 1*sizeof(twoIntsStruct));\n    test_snippetSink(data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n762,Mismatched Memory Management Routines",
        "CWE": "CWE690"
    },
    {
        "UID": "205716",
        "code": "void test_snippet()\n{\n    int * data;\n    data = NULL; \n    \n    data = (int *)malloc(1*sizeof(int));\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE690"
    },
    {
        "UID": "205066",
        "code": "static void CWE690_NULL_Deref_From_Return__int64_t_calloc_21Sink(int64_t * test_snippet\n{\n    if(CWE690_NULL_Deref_From_Return__int64_t_calloc_21Static)\n    {\n        \n        data[0] = 5LL;\n        printLongLongLine(data[0]);\n        free(test_snippet;\n    }\n}",
        "predicted": "476,NULL Pointer Dereference\n401,Missing Release of Memory after Effective Lifetime\n690,Unchecked Return Value to NULL Pointer Dereference",
        "CWE": "CWE690"
    },
    {
        "UID": "206516",
        "code": "void test_snippet()\n{\n    twoIntsStruct * data;\n    data = NULL; \n    \n    data = (twoIntsStruct *)calloc(1, sizeof(twoIntsStruct));\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE690"
    },
    {
        "UID": "206989",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    \n    data = _wfopen(L\"file.txt\", L\"w+\");\n    switch(6)\n    {\n    case 6:\n        \n        fclose(data);\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime\n252,Unchecked Return Value",
        "CWE": "CWE690"
    },
    {
        "UID": "207569",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t * dataArray[5];\n    data = NULL; \n    \n    data = (wchar_t *)realloc(data, 20*sizeof(wchar_t));\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE690"
    },
    {
        "UID": "205649",
        "code": "void test_snippet()\n{\n    int * data;\n    vector<int *> dataVector;\n    data = NULL; \n    \n    data = (int *)calloc(1, sizeof(int));\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE690"
    },
    {
        "UID": "204973",
        "code": "void test_snippet()\n{\n    FILE * data;\n    \n    data = NULL;\n    data = test_snippetSource(data);\n    \n    fclose(data);\n}",
        "predicted": "476,NULL Pointer Dereference\n775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE690"
    },
    {
        "UID": "208025",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        double * * pointer = (double * *)ALLOCA(sizeof(double *));\n        double * data = *pointer; \n        printDoubleLine(*data);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n476,NULL Pointer Dereference",
        "CWE": "CWE758"
    },
    {
        "UID": "208409",
        "code": "void test_snippet()\n{\n    if(globalReturnsTrueOrFalse())\n    {\n        {\n            int * pointer = new int;\n            int data = *pointer; \n            delete pointer;\n            printIntLine(data);\n        }\n    }\n    else\n    {\n        {\n            int data;\n            data = 5;\n            int * pointer = new int;\n            *pointer = data; \n            {\n                int data = *pointer;\n                printIntLine(data);\n            }\n            delete pointer;\n        }\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE758"
    },
    {
        "UID": "208771",
        "code": "void test_snippet()\n{\n    {\n        twoIntsStruct * pointer = (twoIntsStruct *)malloc(sizeof(twoIntsStruct));\n        if (pointer == NULL) {exit(-1);}\n        twoIntsStruct data = *pointer; \n        free(pointer);\n        printIntLine(data.intOne);\n        printIntLine(data.intTwo);\n    }\n}",
        "predicted": "415,Double Free\n416,Use After Free\n457,Use of Uninitialized Variable",
        "CWE": "CWE758"
    },
    {
        "UID": "208175",
        "code": "void test_snippet()\n{\n    while(1)\n    {\n        {\n            int64_t * pointer = (int64_t *)ALLOCA(sizeof(int64_t));\n            int64_t data = *pointer; \n            printLongLongLine(data);\n        }\n        break;\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable",
        "CWE": "CWE758"
    },
    {
        "UID": "209065",
        "code": "void test_snippet()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        wchar_t * * pointer = (wchar_t * *)ALLOCA(sizeof(wchar_t *));\n        wchar_t * data = *pointer; \n        printWLine(data);\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n476,NULL Pointer Dereference",
        "CWE": "CWE758"
    },
    {
        "UID": "209074",
        "code": "void test_snippet()\n{\n    {\n        wchar_t * * pointer = (wchar_t * *)malloc(sizeof(wchar_t *));\n        if (pointer == NULL) {exit(-1);}\n        wchar_t * data = *pointer; \n        free(pointer);\n        printWLine(data);\n    }\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE758"
    },
    {
        "UID": "207789",
        "code": "void test_snippet()\n{\n    {\n        char * * pointer = (char * *)malloc(sizeof(char *));\n        if (pointer == NULL) {exit(-1);}\n        char * data = *pointer; \n        free(pointer);\n        printLine(data);\n    }\n}",
        "predicted": "416,Use After Free",
        "CWE": "CWE758"
    },
    {
        "UID": "209016",
        "code": "static int test_snippet\n{\n    \n    return;\n}",
        "predicted": "This code snippet is not complete and does not contain any specific vulnerability. However, it does have a syntax error as the function does not specify a return type and tries to return without a value. This could potentially fall under the category of:\n\n690,Unchecked Return Value to NULL Pointer Dereference",
        "CWE": "CWE758"
    },
    {
        "UID": "207934",
        "code": "void test_snippet()\n{\n    goto sink;\nsink:\n    {\n        TwoIntsClass * pointer = new TwoIntsClass;\n        TwoIntsClass data = *pointer; \n        delete pointer;\n        printIntLine(data.intOne);\n        printIntLine(data.intTwo);\n    }\n}",
        "predicted": "415,Double Free\n416,Use After Free",
        "CWE": "CWE758"
    },
    {
        "UID": "208382",
        "code": "void test_snippet()\n{\n    if(5==5)\n    {\n        {\n            int * pointer = new int;\n            int data = *pointer; \n            delete pointer;\n            printIntLine(data);\n        }\n    }\n}",
        "predicted": "457,Use of Uninitialized Variable\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE758"
    },
    {
        "UID": "210617",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    map<int, wchar_t *> dataMap;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    {\n        \n        size_t dataLen = wcslen(data);\n        wchar_t * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            wcsncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    \n    dataMap[0] = data;\n    dataMap[1] = data;\n    dataMap[2] = data;\n    test_snippetSink(dataMap);\n}",
        "predicted": "122,Heap-based Buffer Overflow\n401,Missing Release of Memory after Effective Lifetime\n404,Improper Resource Shutdown or Release\n762,Mismatched Memory Management Routines",
        "CWE": "CWE761"
    },
    {
        "UID": "209643",
        "code": "void test_snippet()\n{\n    char * data;\n    vector<char *> dataVector;\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    data[0] = '\\0';\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    \n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    dataVector.insert(dataVector.end(), 1, data);\n    test_snippetSink(dataVector);\n}",
        "predicted": "415,Double Free",
        "CWE": "CWE761"
    },
    {
        "UID": "209798",
        "code": "void CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67bSink(CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_67_structType test_snippet\n{\n    char * data = myStruct.structFirst;\n    \n    for (; *data != '\\0'; data++)\n    {\n        if (*data == SEARCH_CHAR)\n        {\n            printLine(\"We have a match!\");\n            break;\n        }\n    }\n    free(data);\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "210832",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    \n    wcscpy(data, BAD_SOURCE_FIXED_STRING);\n    test_snippetStatic = 1; \n    test_snippetSink(data);\n}",
        "predicted": "121,Stack-based Buffer Overflow",
        "CWE": "CWE761"
    },
    {
        "UID": "210935",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    list<wchar_t *> dataList;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    \n    wcscpy(data, BAD_SOURCE_FIXED_STRING);\n    \n    dataList.push_back(data);\n    dataList.push_back(data);\n    dataList.push_back(data);\n    test_snippetSink(dataList);\n}",
        "predicted": "122,Heap-based Buffer Overflow\n401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE761"
    },
    {
        "UID": "210923",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    CWE761_Free_Pointer_Not_at_Start_of_Buffer__wchar_t_fixed_string_67_structType myStruct;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    \n    wcscpy(data, BAD_SOURCE_FIXED_STRING);\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "209411",
        "code": "void test_snippet()\n{\n    char * data;\n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    data[0] = '\\0';\n    test_snippetSource(data);\n    \n    for (; *data != '\\0'; data++)\n    {\n        if (*data == SEARCH_CHAR)\n        {\n            printLine(\"We have a match!\");\n            break;\n        }\n    }\n    free(data);\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "210816",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    \n    wcscpy(data, BAD_SOURCE_FIXED_STRING);\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        for (; *data != L'\\0'; data++)\n        {\n            if (*data == SEARCH_CHAR)\n            {\n                printLine(\"We have a match!\");\n                break;\n            }\n        }\n        free(data);\n    }\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "211010",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    test_snippet_unionType myUnion;\n    data = (wchar_t *)malloc(100*sizeof(wchar_t));\n    if (data == NULL) {exit(-1);}\n    data[0] = L'\\0';\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        wchar_t *replace;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        size_t dataLen = wcslen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (100 - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n            \n            replace = wcschr(data, L'\\r');\n            if (replace)\n            {\n                *replace = L'\\0';\n            }\n            replace = wcschr(data, L'\\n');\n            if (replace)\n            {\n                *replace = L'\\0';\n            }\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    myUnion.unionFirst = data;\n    {\n        wchar_t * data = myUnion.unionSecond;\n        \n        for (; *data != L'\\0'; data++)\n        {\n            if (*data == SEARCH_CHAR)\n            {\n                printLine(\"We have a match!\");\n                break;\n            }\n        }\n        free(data);\n    }\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "209814",
        "code": "void CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_file_74bSink(map<int, char *> test_snippet\n{\n    \n    char * data = dataMap[2];\n    \n    for (; *data != '\\0'; data++)\n    {\n        if (*data == SEARCH_CHAR)\n        {\n            printLine(\"We have a match!\");\n            break;\n        }\n    }\n    free(data);\n}",
        "predicted": "761,Free of Pointer not at Start of Buffer",
        "CWE": "CWE761"
    },
    {
        "UID": "221557",
        "code": "void test_snippet()\n{\n    char * data;\n    \n    data = NULL;\n    test_snippetSource(data);\n    \n    delete data;\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "221568",
        "code": "static void test_snippet()\n{\n    char * data = CWE762_Mismatched_Memory_Management_Routines__new_array_delete_char_45Data;\n    \n    delete data;\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "216618",
        "code": "void test_snippet()\n{\n    char * data;\n    char * &dataRef = data;\n    \n    data = NULL;\n    \n    data = (char *)malloc(100*sizeof(char));\n    if (data == NULL) {exit(-1);}\n    {\n        char * data = dataRef;\n        \n        delete data;\n    }\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "228139",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    \n    data = NULL;\n    if(globalFive==5)\n    {\n        \n        data = new wchar_t;\n    }\n    if(globalFive==5)\n    {\n        \n        free(data);\n    }\n}",
        "predicted": "762,Mismatched Memory Management Routines\n415,Double Free",
        "CWE": "CWE762"
    },
    {
        "UID": "228786",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    structType myStruct;\n    \n    data = NULL;\n    {\n        wchar_t myString[] = L\"myString\";\n        \n        data = wcsdup(myString);\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "401,Missing Release of Memory after Effective Lifetime",
        "CWE": "CWE762"
    },
    {
        "UID": "217386",
        "code": "static void test_snippet()\n{\n    TwoIntsClass * data = CWE762_Mismatched_Memory_Management_Routines__delete_class_malloc_45Data;\n    \n    delete data;\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "211688",
        "code": "void CWE762_Mismatched_Memory_Management_Routines__delete_array_char_realloc_22bSink(char * test_snippet\n{\n    if(CWE762_Mismatched_Memory_Management_Routines__delete_array_char_realloc_22bGlobal)\n    {\n        \n        delete [] data;\n    }\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "220107",
        "code": "void CWE762_Mismatched_Memory_Management_Routines__delete_struct_calloc_52bSink_b(twoIntsStruct * test_snippet\n{\n    CWE762_Mismatched_Memory_Management_Routines__delete_struct_calloc_52bSink_c(test_snippet;\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "221862",
        "code": "void test_snippet()\n{\n    TwoIntsClass * data;\n    \n    data = NULL;\n    data = test_snippetSource(data);\n    \n    delete data;\n}",
        "predicted": "415,Double Free\n762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "219548",
        "code": "static void CWE762_Mismatched_Memory_Management_Routines__delete_long_malloc_21Sink(long * test_snippet\n{\n    if(CWE762_Mismatched_Memory_Management_Routines__delete_long_malloc_21Static)\n    {\n        \n        delete data;\n    }\n}",
        "predicted": "762,Mismatched Memory Management Routines",
        "CWE": "CWE762"
    },
    {
        "UID": "229340",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    if(globalReturnsTrueOrFalse())\n    {\n        \n        data = fopen(\"BadSink_fopen.txt\", \"w+\");\n        \n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n    else\n    {\n        \n        if (data != NULL)\n        {\n            fclose(data);\n        }\n        data = fopen(\"GoodSink_fopen.txt\", \"w+\");\n        \n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE773"
    },
    {
        "UID": "229467",
        "code": "void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_74bSink(map<int, FILE *> test_snippet\n{\n    \n    FILE * data = dataMap[2];\n    \n    data = fopen(\"BadSink_fopen.txt\", \"w+\");\n    \n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE773"
    },
    {
        "UID": "229451",
        "code": "void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_67bSink(CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_67_structType test_snippet\n{\n    FILE * data = myStruct.structFirst;\n    \n    data = fopen(\"BadSink_fopen.txt\", \"w+\");\n    \n    if (data != NULL)\n    {\n        fclose(data);\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE773"
    },
    {
        "UID": "229775",
        "code": "void test_snippet()\n{\n    HANDLE data;\n    \n    data = INVALID_HANDLE_VALUE;\n    \n    data = CreateFile(\"BadSource_w32CreateFile.txt\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    test_snippetDataForBadSink = data;\n    test_snippetSink();\n}",
        "predicted": "272,Least Privilege Violation\n377,Insecure Temporary File\n23,Relative Path Traversal",
        "CWE": "CWE773"
    },
    {
        "UID": "229697",
        "code": "void test_snippet()\n{\n    HANDLE data;\n    test_snippet_unionType myUnion;\n    \n    data = INVALID_HANDLE_VALUE;\n    \n    data = CreateFile(\"BadSource_w32CreateFile.txt\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    myUnion.unionFirst = data;\n    {\n        HANDLE data = myUnion.unionSecond;\n        \n        data = CreateFile(\"BadSink_w32CreateFile.txt\",\n                          (GENERIC_WRITE|GENERIC_READ),\n                          0,\n                          NULL,\n                          OPEN_ALWAYS,\n                          FILE_ATTRIBUTE_NORMAL,\n                          NULL);\n        \n        if (data != INVALID_HANDLE_VALUE)\n        {\n            CloseHandle(data);\n        }\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE773"
    },
    {
        "UID": "229536",
        "code": "void test_snippet()\n{\n    int data;\n    test_snippet_unionType myUnion;\n    \n    data = -1;\n    \n    data = OPEN(\"BadSource_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    myUnion.unionFirst = data;\n    {\n        int data = myUnion.unionSecond;\n        \n        data = OPEN(\"BadSink_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n        \n        if (data != -1)\n        {\n            CLOSE(data);\n        }\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime\n252,Unchecked Return Value",
        "CWE": "CWE773"
    },
    {
        "UID": "229612",
        "code": "void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__open_67bSink(CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__open_67_structType test_snippet\n{\n    int data = myStruct.structFirst;\n    \n    data = OPEN(\"BadSink_open.txt\", O_RDWR|O_CREAT, S_IREAD|S_IWRITE);\n    \n    if (data != -1)\n    {\n        CLOSE(data);\n    }\n}",
        "predicted": "773,Missing Reference to Active File Descriptor or Handle",
        "CWE": "CWE773"
    },
    {
        "UID": "229716",
        "code": "void test_snippet()\n{\n    HANDLE data;\n    \n    data = INVALID_HANDLE_VALUE;\n    \n    data = CreateFile(\"BadSource_w32CreateFile.txt\",\n                      (GENERIC_WRITE|GENERIC_READ),\n                      0,\n                      NULL,\n                      OPEN_ALWAYS,\n                      FILE_ATTRIBUTE_NORMAL,\n                      NULL);\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "377,Insecure Temporary File",
        "CWE": "CWE773"
    },
    {
        "UID": "229375",
        "code": "void test_snippet()\n{\n    FILE * data;\n    test_snippet_unionType myUnion;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    myUnion.unionFirst = data;\n    {\n        FILE * data = myUnion.unionSecond;\n        \n        data = fopen(\"BadSink_fopen.txt\", \"w+\");\n        \n        if (data != NULL)\n        {\n            fclose(data);\n        }\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime\n404,Improper Resource Shutdown or Release",
        "CWE": "CWE773"
    },
    {
        "UID": "229357",
        "code": "static void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_21Sink(FILE * test_snippet\n{\n    if(CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_21Static)\n    {\n        \n        data = fopen(\"BadSink_fopen.txt\", \"w+\");\n        \n        if (data != NULL)\n        {\n            fclose(test_snippet;\n        }\n    }\n}",
        "predicted": "773,Missing Reference to Active File Descriptor or Handle",
        "CWE": "CWE773"
    },
    {
        "UID": "229831",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    switch(6)\n    {\n    case 6:\n        \n        ; \n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "230182",
        "code": "static void CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_41Sink(HANDLE test_snippet\n{\n    \n    ; \n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "229793",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    if(1)\n    {\n        \n        ; \n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "229865",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    data = test_snippetSource(data);\n    \n    ; \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE775"
    },
    {
        "UID": "229912",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    test_snippetSource(data);\n    \n    ; \n}",
        "predicted": "476,NULL Pointer Dereference",
        "CWE": "CWE775"
    },
    {
        "UID": "229932",
        "code": "void test_snippet()\n{\n    FILE * data;\n    CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_67_structType myStruct;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "229846",
        "code": "void test_snippet()\n{\n    FILE * data;\n    data = NULL;\n    \n    data = fopen(\"BadSource_fopen.txt\", \"w+\");\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "230198",
        "code": "static void test_snippet()\n{\n    HANDLE data = CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_45Data;\n    \n    ; \n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "229849",
        "code": "void CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_22bSink(FILE * test_snippet\n{\n    if(CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_22bGlobal)\n    {\n        \n        ; \n    }\n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "229934",
        "code": "void CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_67bSink(CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_67_structType test_snippet\n{\n    FILE * data = myStruct.structFirst;\n    \n    ; \n}",
        "predicted": "775,Missing Release of File Descriptor or Handle after Effective Lifetime",
        "CWE": "CWE775"
    },
    {
        "UID": "236643",
        "code": "void test_snippet()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    char dataBuffer[100] = COMMAND_ARG2;\n    data = dataBuffer;\n    {\n        char * data = *dataPtr1;\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        {\n            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n            \n            \n            _spawnvp(_P_WAIT, COMMAND_INT, args);\n        }\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "247085",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t data_buf[100] = FULL_COMMAND;\n    data = data_buf;\n    switch(6)\n    {\n    case 6:\n    {\n        \n        size_t dataLen = wcslen(data);\n        wchar_t * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            wcsncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    if (SYSTEM(data) != 0)\n    {\n        printLine(\"command execution failed!\");\n        exit(1);\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "235592",
        "code": "void CWE78_OS_Command_Injection__char_connect_socket_execl_66bSink(char * test_snippet\n{\n    \n    char * data = dataArray[2];\n    \n    \n    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "236166",
        "code": "void CWE78_OS_Command_Injection__char_connect_socket_w32_execvp_41Sink(char * test_snippet\n{\n    {\n        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n        \n        \n        EXECVP(COMMAND_INT, args);\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "236252",
        "code": "void CWE78_OS_Command_Injection__char_connect_socket_w32_execvp_73bSink(list<char *> test_snippet\n{\n    \n    char * data = dataList.back();\n    {\n        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n        \n        \n        EXECVP(COMMAND_INT, args);\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "235538",
        "code": "static void test_snippet()\n{\n    char * data = CWE78_OS_Command_Injection__char_connect_socket_execl_45Data;\n    \n    \n    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "238979",
        "code": "void test_snippet()\n{\n    char * data;\n    char data_buf[100] = FULL_COMMAND;\n    data = data_buf;\n    {\n        \n        size_t dataLen = strlen(data);\n        char * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            strncat(data+dataLen, environment, 100-dataLen-1);\n        }\n    }\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n20,Improper Input Validation\n126,Buffer Over-read\n",
        "CWE": "CWE78"
    },
    {
        "UID": "243392",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[100] = COMMAND_ARG2;\n    data = dataBuffer;\n    test_snippetStatic = 1; \n    data = test_snippetSource(data);\n    \n    \n    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "235914",
        "code": "void CWE78_OS_Command_Injection__char_connect_socket_system_66bSink(char * test_snippet\n{\n    \n    char * data = dataArray[2];\n    \n    if (SYSTEM(data) != 0)\n    {\n        printLine(\"command execution failed!\");\n        exit(1);\n    }\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "237631",
        "code": "static void test_snippet()\n{\n    char * data = CWE78_OS_Command_Injection__char_console_w32spawnl_45Data;\n    \n    \n    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);\n}",
        "predicted": "78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "CWE": "CWE78"
    },
    {
        "UID": "234642",
        "code": "void test_snippet()\n{\n    size_t data;\n    \n    data = 0;\n    \n    fscanf(stdin, \"%zu\", &data);\n    test_snippetGlobal = 1; \n    test_snippetSink(data);\n}",
        "predicted": "252,Unchecked Return Value",
        "CWE": "CWE789"
    },
    {
        "UID": "235179",
        "code": "void test_snippet()\n{\n    size_t data;\n    \n    data = 0;\n    \n    data = rand();\n    test_snippetData = data;\n    test_snippetSink();\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE789"
    },
    {
        "UID": "231554",
        "code": "void test_snippet()\n{\n    size_t data;\n    \n    data = 0;\n    \n    data = rand();\n    test_snippetSink(&data);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE789"
    },
    {
        "UID": "234968",
        "code": "void CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_listen_socket_54bSink_b(size_t test_snippet\n{\n    CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_listen_socket_54bSink_c(test_snippet;\n}",
        "predicted": "789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE789"
    },
    {
        "UID": "231074",
        "code": "void test_snippet()\n{\n    size_t data;\n    size_t dataArray[5];\n    \n    data = 0;\n    \n    fscanf(stdin, \"%zu\", &data);\n    \n    dataArray[2] = data;\n    test_snippetSink(dataArray);\n}",
        "predicted": "125,Out-of-bounds Read\n190,Integer Overflow or Wraparound\n252,Unchecked Return Value\n606,Unchecked Input for Loop Condition",
        "CWE": "CWE789"
    },
    {
        "UID": "233744",
        "code": "void CWE789_Uncontrolled_Mem_Alloc__new_char_listen_socket_54dSink_d(size_t test_snippet\n{\n    CWE789_Uncontrolled_Mem_Alloc__new_char_listen_socket_54dSink_e(test_snippet;\n}",
        "predicted": "789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE789"
    },
    {
        "UID": "234974",
        "code": "void CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_listen_socket_54dSink_d(size_t test_snippet\n{\n    CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_listen_socket_54dSink_e(test_snippet;\n}",
        "predicted": "789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE789"
    },
    {
        "UID": "232988",
        "code": "void CWE789_Uncontrolled_Mem_Alloc__new_char_connect_socket_53bSink_b(size_t test_snippet\n{\n    CWE789_Uncontrolled_Mem_Alloc__new_char_connect_socket_53bSink_c(test_snippet;\n}",
        "predicted": "789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE789"
    },
    {
        "UID": "235193",
        "code": "void CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_rand_52bSink_b(size_t test_snippet\n{\n    CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_rand_52bSink_c(test_snippet;\n}",
        "predicted": "789,Memory Allocation with Excessive Size Value",
        "CWE": "CWE789"
    },
    {
        "UID": "231494",
        "code": "void test_snippet()\n{\n    size_t data;\n    \n    data = 0;\n    \n    data = rand();\n    test_snippetSink(data);\n}",
        "predicted": "338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
        "CWE": "CWE789"
    },
    {
        "UID": "252545",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(globalTrue)\n    {\n        {\n            \n            size_t dataLen = wcslen(data);\n            wchar_t * environment = GETENV(ENV_VARIABLE);\n            \n            if (environment != NULL)\n            {\n                \n                wcsncat(data+dataLen, environment, 256-dataLen-1);\n            }\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "252660",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    CWE90_LDAP_Injection__w32_wchar_t_environment_67_structType myStruct;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = wcslen(data);\n        wchar_t * environment = GETENV(ENV_VARIABLE);\n        \n        if (environment != NULL)\n        {\n            \n            wcsncat(data+dataLen, environment, 256-dataLen-1);\n        }\n    }\n    myStruct.structFirst = data;\n    test_snippetSink(myStruct);\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "252720",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n        \n        size_t dataLen = wcslen(data);\n        FILE * pFile;\n        \n        if (256-dataLen > 1)\n        {\n            pFile = fopen(FILENAME, \"r\");\n            if (pFile != NULL)\n            {\n                \n                if (fgetws(data+dataLen, (int)(256-dataLen), pFile) == NULL)\n                {\n                    printLine(\"fgetws() failed\");\n                    \n                    data[dataLen] = L'\\0';\n                }\n                fclose(pFile);\n            }\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "251593",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n        \n        size_t dataLen = strlen(data);\n        \n        if (256-dataLen > 1)\n        {\n            \n            if (fgets(data+dataLen, (int)(256-dataLen), stdin) != NULL)\n            {\n                \n                dataLen = strlen(data);\n                if (dataLen > 0 && data[dataLen-1] == '\\n')\n                {\n                    data[dataLen-1] = '\\0';\n                }\n            }\n            else\n            {\n                printLine(\"fgets() failed\");\n                \n                data[dataLen] = '\\0';\n            }\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "251777",
        "code": "void test_snippet()\n{\n    char * data;\n    char * *dataPtr1 = &data;\n    char * *dataPtr2 = &data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    {\n        char * data = *dataPtr1;\n        {\n            \n            size_t dataLen = strlen(data);\n            char * environment = GETENV(ENV_VARIABLE);\n            \n            if (environment != NULL)\n            {\n                \n                strncat(data+dataLen, environment, 256-dataLen-1);\n            }\n        }\n        *dataPtr1 = data;\n    }\n    {\n        char * data = *dataPtr2;\n        {\n            LDAP* pLdapConnection = NULL;\n            ULONG connectSuccess = 0L;\n            ULONG searchSuccess = 0L;\n            LDAPMessage *pMessage = NULL;\n            char filter[256];\n            \n            _snprintf(filter, 256-1, \"(cn=%s)\", data);\n            pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n            if (pLdapConnection == NULL)\n            {\n                printLine(\"Initialization failed\");\n                exit(1);\n            }\n            connectSuccess = ldap_connect(pLdapConnection, NULL);\n            if (connectSuccess != LDAP_SUCCESS)\n            {\n                printLine(\"Connection failed\");\n                exit(1);\n            }\n            searchSuccess = ldap_search_ext_sA(\n                                pLdapConnection,\n                                \"base\",\n                                LDAP_SCOPE_SUBTREE,\n                                filter,\n                                NULL,\n                                0,\n                                NULL,\n                                NULL,\n                                LDAP_NO_LIMIT,\n                                LDAP_NO_LIMIT,\n                                &pMessage);\n            if (searchSuccess != LDAP_SUCCESS)\n            {\n                printLine(\"Search failed\");\n                if (pMessage != NULL)\n                {\n                    ldap_msgfree(pMessage);\n                }\n                exit(1);\n            }\n            \n            \n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            \n            ldap_unbind(pLdapConnection);\n        }\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\n526,Cleartext Storage of Sensitive Information in an Environment Variable",
        "CWE": "CWE90"
    },
    {
        "UID": "251442",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    test_snippetStatic = 1; \n    data = test_snippetSource(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "252419",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    {\n        \n        size_t dataLen = wcslen(data);\n        \n        if (256-dataLen > 1)\n        {\n            \n            if (fgetws(data+dataLen, (int)(256-dataLen), stdin) != NULL)\n            {\n                \n                dataLen = wcslen(data);\n                if (dataLen > 0 && data[dataLen-1] == L'\\n')\n                {\n                    data[dataLen-1] = L'\\0';\n                }\n            }\n            else\n            {\n                printLine(\"fgetws() failed\");\n                \n                data[dataLen] = L'\\0';\n            }\n        }\n    }\n    {\n        wchar_t * dataCopy = data;\n        wchar_t * data = dataCopy;\n        {\n            LDAP* pLdapConnection = NULL;\n            ULONG connectSuccess = 0L;\n            ULONG searchSuccess = 0L;\n            LDAPMessage *pMessage = NULL;\n            wchar_t filter[256];\n            \n            _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n            pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n            if (pLdapConnection == NULL)\n            {\n                printLine(\"Initialization failed\");\n                exit(1);\n            }\n            connectSuccess = ldap_connect(pLdapConnection, NULL);\n            if (connectSuccess != LDAP_SUCCESS)\n            {\n                printLine(\"Connection failed\");\n                exit(1);\n            }\n            searchSuccess = ldap_search_ext_sW(\n                                pLdapConnection,\n                                L\"base\",\n                                LDAP_SCOPE_SUBTREE,\n                                filter,\n                                NULL,\n                                0,\n                                NULL,\n                                NULL,\n                                LDAP_NO_LIMIT,\n                                LDAP_NO_LIMIT,\n                                &pMessage);\n            if (searchSuccess != LDAP_SUCCESS)\n            {\n                printLine(\"Search failed\");\n                if (pMessage != NULL)\n                {\n                    ldap_msgfree(pMessage);\n                }\n                exit(1);\n            }\n            \n            \n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            \n            ldap_unbind(pLdapConnection);\n        }\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "251904",
        "code": "void test_snippet()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    if(globalReturnsTrue())\n    {\n        {\n            \n            size_t dataLen = strlen(data);\n            FILE * pFile;\n            \n            if (256-dataLen > 1)\n            {\n                pFile = fopen(FILENAME, \"r\");\n                if (pFile != NULL)\n                {\n                    \n                    if (fgets(data+dataLen, (int)(256-dataLen), pFile) == NULL)\n                    {\n                        printLine(\"fgets() failed\");\n                        \n                        data[dataLen] = '\\0';\n                    }\n                    fclose(pFile);\n                }\n            }\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "252247",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    test_snippetStatic = 1; \n    data = test_snippetSource(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    },
    {
        "UID": "252846",
        "code": "void test_snippet()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(5==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}",
        "predicted": "90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
        "CWE": "CWE90"
    }
]